<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Table on </title>
    <link>http://b-comm.ru/tags/table/index.xml</link>
    <description>Recent content in Table on </description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://b-comm.ru/tags/table/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Скрипт обслуживания таблиц базы данных при запуске</title>
      <link>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%BE%D0%B1%D1%81%D0%BB%D1%83%D0%B6%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD</link>
      <pubDate>Thu, 23 Jul 2009 10:11:00 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%BE%D0%B1%D1%81%D0%BB%D1%83%D0%B6%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD</guid>
      <description>&lt;p&gt;Скрипт обслуживания таблиц базы данных при запуске компьютера.&lt;/p&gt;

&lt;p&gt;Идея состоит в том, что не нужно париться в моменты рестарта сервера, коннектиться к нему и восстанавливать таблицы.&lt;/p&gt;

&lt;p&gt;Конечно это случалось редко, но всё же случалось и тогда такой скрипт помогал.&lt;/p&gt;

&lt;p&gt;Плюс не сомненно в том, что таблицы чекаются, оптимизируются при старте &amp;#8212; это Мне помогнало в freenibs&amp;#8217;е увеличивать скорость выборки)))&lt;/p&gt;

&lt;p&gt;main.cpp:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre lang=&#34;cpp&#34; line=&#34;1&#34;&gt;#include &amp;lt;QtCore&gt;
#include &amp;lt;QCoreApplication&gt;
#include &amp;lt;QtSql&gt;
#include &amp;lt;iostream&gt;
#include &amp;lt;cstdlib&gt;
#include &amp;lt;iomanip&gt;
#include &amp;lt;stdio.h&gt;
#include &amp;lt;stdlib.h&gt;
#include &amp;lt;string.h&gt;
#include &amp;lt;time.h&gt;
using namespace std;


#define SQLDRIVER &#34;QMYSQL&#34;
#define HOST &#34;10.1.1.1&#34;
#define DBNAME &#34;freenibs&#34;
#define USER &#34;freenibs&#34;
#define PASSWORD &#34;freenibs&#34;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QTextCodec *codec = QTextCodec::codecForName(&#34;CP1251&#34;);
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForCStrings(codec);

    QSqlDatabase db = QSqlDatabase::addDatabase(SQLDRIVER);

    if( !db.isDriverAvailable(SQLDRIVER))
    {

    }


    db.setHostName(HOST);
    db.setDatabaseName(DBNAME);
    db.setUserName(USER);
    db.setPassword(PASSWORD);
    //db.setPort(3306);
    bool ok=db.open();
    if(ok!=true){
        std::cout&amp;lt;&amp;lt;&#34;unable connec&#39;t&#34;;
        exit(1);
    }
    // QString exec_this;

    QVector&amp;lt;QString&gt; tables(0);
    tables.append(&#34;`actions`&#34;);
    tables.append(&#34;`adress`&#34;);
    tables.append(&#34;`arpwatch`&#34;);
    tables.append(&#34;`balcklist`&#34;);
    tables.append(&#34;`client_problem`&#34;);
    tables.append(&#34;`holidays`&#34;);
    tables.append(&#34;`packets`&#34;);
    tables.append(&#34;`pipes`&#34;);
    tables.append(&#34;`prev`&#34;);
    tables.append(&#34;`prices`&#34;);
    tables.append(&#34;`smtp`&#34;);
    tables.append(&#34;`smtp_black`&#34;);
    tables.append(&#34;`smtp_log`&#34;);
    tables.append(&#34;`system`&#34;);
    tables.append(&#34;`updown`&#34;);
    tables.append(&#34;`users`&#34;);
    tables.append(&#34;`zakaz`&#34;);
    tables.append(&#34;`zakaz_history`&#34;);

    for(int i=0;i&amp;lt;tables.size();++i)
    {
            QSqlQuery query(&#34;CHECK TABLE &#34;+tables.at(i)+&#34; &#34;);
            query.clear();
            QSqlQuery query1(&#34;ANALYZE TABLE &#34;+tables.at(i)+&#34; &#34;);
            query1.clear();
            QSqlQuery query2(&#34;REPAIR TABLE &#34;+tables.at(i)+&#34; &#34;);
            query2.clear();
            QSqlQuery query3(&#34;OPTIMIZE TABLE &#34;+tables.at(i)+&#34; &#34;);
            query3.clear();
            QSqlQuery query4(&#34;FLUSH TABLE &#34;+tables.at(i)+&#34; &#34;);
            query4.clear();
            //qDebug()&amp;lt;&amp;lt;query.lastError()&amp;lt;&amp;lt;endl;
     }
     db.close();
//    return a.exec();
}
&lt;/pre&gt;

&lt;p&gt;Makefile:&lt;/p&gt;

&lt;pre lang=&#34;makefile&#34; line=&#34;1&#34;&gt;#############################################################################
# Makefile for building: freenibs-start
# Generated by qmake (2.01a) (Qt 4.4.3) on: Sun Mar 15 02:24:54 2009
# Project:  pro.pro
# Template: app
# Command: /usr/local/bin/qmake-qt4 -unix -o Makefile pro.pro
#############################################################################

####### Compiler, tools and options

CC            = cc
CXX           = c++
DEFINES       = -DQT_NO_DEBUG -DQT_SQL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
INCPATH       = -I/usr/local/share/qt4/mkspecs/freebsd-g++ -I. -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4 -I. -I. -I/usr/local/include
LINK          = c++
LFLAGS        = -pthread -Wl,-rpath,/usr/local/lib/qt4
LIBS          = $(SUBLIBS)  -L/usr/local/lib -L/usr/local/lib/qt4 -lQtSql -L/usr/local/lib/qt4 -L/usr/local/lib -pthread -pthread -lQtGui -pthread -lpng -lSM -lICE -pthread -pthread -lXi -lXrender -lXrandr -lfreetype -lfontconfig -lXext -lX11 -lQtCore -lz -lm -pthread -lgthread-2.0 -lglib-2.0 -liconv
AR            = ar cqs
RANLIB        =
QMAKE         = /usr/local/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -R
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = $(COPY_FILE)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp
OBJECTS       = main.o
DIST          = /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                pro.pro
QMAKE_TARGET  = freenibs-start
DESTDIR       =
TARGET        = freenibs-start

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cc.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cxx.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.C.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.c.o:
        $(CC) -c $(CFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)
        $(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: pro.pro  /usr/local/share/qt4/mkspecs/freebsd-g++/qmake.conf /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                /usr/local/lib/qt4/libQtSql.prl \
                /usr/local/lib/qt4/libQtCore.prl \
                /usr/local/lib/qt4/libQtGui.prl
        $(QMAKE) -unix -o Makefile pro.pro
/usr/local/share/qt4/mkspecs/common/unix.conf:
/usr/local/share/qt4/mkspecs/qconfig.pri:
/usr/local/share/qt4/mkspecs/features/qt_functions.prf:
/usr/local/share/qt4/mkspecs/features/qt_config.prf:
/usr/local/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/local/share/qt4/mkspecs/features/default_pre.prf:
/usr/local/share/qt4/mkspecs/features/release.prf:
/usr/local/share/qt4/mkspecs/features/default_post.prf:
/usr/local/share/qt4/mkspecs/features/unix/thread.prf:
/usr/local/share/qt4/mkspecs/features/warn_on.prf:
/usr/local/share/qt4/mkspecs/features/qt.prf:
/usr/local/share/qt4/mkspecs/features/moc.prf:
/usr/local/share/qt4/mkspecs/features/resources.prf:
/usr/local/share/qt4/mkspecs/features/uic.prf:
/usr/local/share/qt4/mkspecs/features/yacc.prf:
/usr/local/share/qt4/mkspecs/features/lex.prf:
/usr/local/lib/qt4/libQtSql.prl:
/usr/local/lib/qt4/libQtCore.prl:
/usr/local/lib/qt4/libQtGui.prl:
qmake:  FORCE
        @$(QMAKE) -unix -o Makefile pro.pro

dist:
        @$(CHK_DIR_EXISTS) .tmp/freenibs-start1.0.0 || $(MKDIR) .tmp/freenibs-start1.0.0
        $(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/freenibs-start1.0.0/ &amp;#038;&amp;#038; $(COPY_FILE) --parents main.cpp .tmp/freenibs-start1.0.0/ &amp;#038;&amp;#038; (cd `dirname .tmp/freenibs-start1.0.0` &amp;#038;&amp;#038; $(TAR) freenibs-start1.0.0.tar freenibs-start1.0.0 &amp;#038;&amp;#038; $(COMPRESS) freenibs-start1.0.0.tar) &amp;#038;&amp;#038; $(MOVE) `dirname .tmp/freenibs-start1.0.0`/freenibs-start1.0.0.tar.gz . &amp;#038;&amp;#038; $(DEL_FILE) -r .tmp/freenibs-start1.0.0


clean:compiler_clean
        -$(DEL_FILE) $(OBJECTS)
        -$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
        -$(DEL_FILE) $(TARGET)
        -$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
        -$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean:

####### Compile

main.o: main.cpp
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:


&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>