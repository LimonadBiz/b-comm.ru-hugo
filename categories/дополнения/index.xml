<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Дополнения on </title>
    <link>http://b-comm.ru/categories/%D0%B4%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F/index.xml</link>
    <description>Recent content in Дополнения on </description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://b-comm.ru/categories/%D0%B4%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Мои скрипты мониторинга свичей по snmp</title>
      <link>http://b-comm.ru/billing/%D0%BC%D0%BE%D0%B8-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%BC%D0%BE%D0%BD%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%BD%D0%B3%D0%B0-%D1%81%D0%B2%D0%B8%D1%87%D0%B5%D0%B9-%D0%BF%D0%BE-snmp</link>
      <pubDate>Sat, 19 Feb 2011 21:01:34 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D0%BC%D0%BE%D0%B8-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%BC%D0%BE%D0%BD%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%BD%D0%B3%D0%B0-%D1%81%D0%B2%D0%B8%D1%87%D0%B5%D0%B9-%D0%BF%D0%BE-snmp</guid>
      <description>&lt;h2 id=&#34;мои-скрипты-мониторинга-свичей-по-snmp&#34;&gt;Мои скрипты мониторинга свичей по snmp&lt;/h2&gt;

&lt;p&gt;Я синхронизирую данные с базай FreeNIBS 1.x где беру данные;) Это можно пофиксить в принципе.&lt;/p&gt;

&lt;p&gt;Так выглядит результат:&lt;/p&gt;

&lt;div id=&#34;attachment_170&#34; style=&#34;width: 1034px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;http://b-comm.ru/wp-content/uploads/2011/02/SNMP-Dlink-3028.jpg&#34;&gt;&lt;img src=&#34;http://b-comm.ru/wp-content/uploads/2011/02/SNMP-Dlink-3028-1024x159.jpg&#34; alt=&#34;SNMP Dlink 3028&#34; title=&#34;SNMP Dlink 3028&#34; width=&#34;1024&#34; height=&#34;159&#34; class=&#34;size-large wp-image-170&#34; srcset=&#34;http://b-comm.ru/wp-content/uploads/2011/02/SNMP-Dlink-3028-1024x159.jpg 1024w, http://b-comm.ru/wp-content/uploads/2011/02/SNMP-Dlink-3028-300x46.jpg 300w, http://b-comm.ru/wp-content/uploads/2011/02/SNMP-Dlink-3028.jpg 1270w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    SNMP Dlink 3028
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;В общем скрипт раз в х минут по крону скрипт сканирует свичи. Так же идёт синхронизация с базой в которой содержатся данные о пользователях их дипозитах и макадрессах.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;crontab:&lt;/strong&gt;&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;*/30 *  * * *   root   rm /var/www/skmsw/pid/*
*/5 *  * * *   root    /usr/bin/php -q /var/www/skmsw/cron.php  &gt;/dev/null 2&gt;1&amp;
&lt;/pre&gt;

&lt;pre lang=&#34;sql&#34; line=&#34;1&#34;&gt;-- phpMyAdmin SQL Dump
-- version 3.3.9.2

-- Время создания: Фев 21 2011 г., 00:24
-- Версия сервера: 5.5.9
-- Версия PHP: 5.3.5

SET SQL_MODE=&#34;NO_AUTO_VALUE_ON_ZERO&#34;;

--
-- База данных: `skmsw`
--

-- --------------------------------------------------------

--
-- Структура таблицы `freenibs`
--

DROP TABLE IF EXISTS `freenibs`;
CREATE TABLE IF NOT EXISTS `freenibs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `mac` varchar(100) NOT NULL,
  `user` varchar(255) NOT NULL,
  `uid` int(11) NOT NULL,
  `deposit` double(16,3) NOT NULL,
  `en` tinyint(4) NOT NULL DEFAULT &#39;0&#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `mac` (`mac`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=10869793 ;

-- --------------------------------------------------------

--
-- Структура таблицы `mac`
--

DROP TABLE IF EXISTS `mac`;
CREATE TABLE IF NOT EXISTS `mac` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `port` int(11) NOT NULL,
  `mac` varchar(255) NOT NULL,
  `sw_id` int(11) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `port` (`port`,`mac`,`sw_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5293 ;

-- --------------------------------------------------------

--
-- Структура таблицы `packets`
--

DROP TABLE IF EXISTS `packets`;
CREATE TABLE IF NOT EXISTS `packets` (
  `gid` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `credit` float(16,4) NOT NULL,
  `activated` smallint(6) NOT NULL DEFAULT &#39;1&#39;,
  `month_traffic_limit` float(25,6) NOT NULL,
  `framed_ip` varchar(255) NOT NULL,
  `     framed_mask` varchar(40) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `stat`
--

DROP TABLE IF EXISTS `stat`;
CREATE TABLE IF NOT EXISTS `stat` (
  `mac_n` bigint(255) NOT NULL,
  `login_n` bigint(255) NOT NULL,
  `sw_n` bigint(255) NOT NULL,
  `all_traf` float(30,3) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `sw`
--

DROP TABLE IF EXISTS `sw`;
CREATE TABLE IF NOT EXISTS `sw` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT &#39;sw&#39;,
  `type_res` varchar(25) NOT NULL DEFAULT &#39;switch&#39;,
  `ip` bigint(255) NOT NULL,
  `parent_sw_id` int(11) NOT NULL,
  `snmppass` varchar(100) NOT NULL DEFAULT &#39;public&#39;,
  `snmpversion` varchar(5) NOT NULL DEFAULT &#39;1&#39;,
  `snmpuser` varchar(100) NOT NULL,
  `type` varchar(100) NOT NULL,
  `model` varchar(255) NOT NULL,
  `ports` int(11) NOT NULL,
  `addr` varchar(255) NOT NULL,
  `disallow_ports` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=256 ;
&lt;/pre&gt;

&lt;p&gt;Примеры данных:&lt;/p&gt;

&lt;pre lang=&#34;sql&#34; line=&#34;1&#34;&gt;INSERT INTO `freenibs` VALUES(373, &#39;00:e0:4c:75:00:48&#39;, &#39;olya18&#39;, 415, 7.690, 0);
INSERT INTO `freenibs` VALUES(7855579, &#39;40:61:86:2c:89:d8&#39;, &#39;192.168.1.100&#39;, 0, -2048.000, 0);
INSERT INTO `sw` VALUES(1, &#39;sw&#39;, &#39;switch&#39;, 2886730242, 0, &#39;public&#39;, &#39;1&#39;, &#39;&#39;, &#39;dlink&#39;, &#39; D-Link DES-3028 Fast Ethernet Switch&#39;, 24, &#39;&#39;, &#39;25,26,27,28&#39;);

&lt;/pre&gt;

&lt;p&gt;index.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php
 include_once(&#34;engine.php&#34;);
 $db=new db_mysql(HOST,USER,DB_PASS,DB,DEBUG_DB);
 if(DEBUG_DB==&#34;true&#34;) echo &#39;$db obj is ok&#39;.&#34;&lt;br&gt;\n&#34;;
 //$db-&gt;SET_NAMES(&#34;cp1251&#34;);
 //$db-&gt;SET_COLLATE(&#34;latin1_swedish_ci&#34;);
 $db-&gt;SET_COLLATE(&#34;cp1251_general_ci&#34;);
 
 $db_nibs=new db_mysql(HOST_NIBS,USER_NIBS,DB_NIBS_PASS,DB_NIBS,DEBUG_DB);
  if(DEBUG_DB==&#34;true&#34;) echo &#39;$db_nibs obj is ok&#39;.&#34;

&lt;br /&gt;\n&#34;;
 //$db_nibs-&gt;SET_NAMES(&#34;cp1251&#34;);
 //$db-&gt;SET_COLLATE(&#34;latin1_swedish_ci&#34;);
 $db_nibs-&gt;SET_COLLATE(&#34;cp1251_general_ci&#34;);
 
 $page=new page(&amp;$db,&amp;$db_nibs);
 if(DEBUG_DB==&#34;true&#34;) echo &#39;$page obj is ok&#39;.&#34;&lt;br /&gt;\n&#34;;
 switch($_GET[&#39;page&#39;]){
    case &#34;sw&#34;:
        break;
    default:
        $page-&gt;top();
        $page-&gt;show_all_sw();
        $page-&gt;bottom();
        break;
 }
 
?&gt;
&lt;/pre&gt;

&lt;p&gt;engine.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php
@include_once(&#34;define.php&#34;);
include_once(&#34;PHPTelnet.php&#34;);
include_once(&#34;telnet.class.php&#34;);
if(DEBUG_DB==true){
    include_once(&#34;db.php&#34;);
    include_once(&#34;page.php&#34;);   
}
else{
    @include_once(&#34;db.php&#34;);
    @include_once(&#34;page.php&#34;);  
}

function quote_smart($value)
{
    // если magic_quotes_gpc включена - используем stripslashes
    if (get_magic_quotes_gpc()) {
        $value = stripslashes($value);
    }
    // Если переменная - число, то экранировать её не нужно
    // если нет - то окружем её кавычками, и экранируем
    if (!is_numeric($value)) {
        $value = mysql_real_escape_string($value);
    }
    return $value;
}
function crypt_password($clear,$cryptscheme, $salt = &#39;&#39;)
    {
        

        if ($cryptscheme == &#39;sha&#39;)
        {
            $hash = sha1($clear);
            $cryptedpass = &#39;{SHA}&#39; . base64_encode(pack(&#39;H*&#39;, $hash));
        }
        else
        {
            if ($salt != &#39;&#39;)
            {
                if ($cryptscheme == &#39;des&#39;)
                {
                    $salt = substr($salt, 0, 2);
                }
                else
                if ($cryptscheme == &#39;md5&#39;)
                {
                    $salt = substr($salt, 0, 12);
                }
                else
                {
                    $salt = &#39;&#39;;
                }
            }
            $cryptedpass = crypt($clear, $salt);
        }

        return $cryptedpass;
    }
    function dec_hex($int){
        $res=dechex($int);
        if (strlen($res)==1) $res=&#39;0&#39;.$res;
        $res=strtoupper($res);
        return $res;
    }
    function snmptable($host, $community, $oid) {
    // TODO: get original state and restore at bottom
    snmp_set_oid_numeric_print(TRUE);
    snmp_set_quick_print(TRUE);
    snmp_set_enum_print(TRUE);

    $retval = array();
    $raw = snmprealwalk($host, $community, $oid);
    if (count($raw) == 0) return ($retval); // no data
   
    $prefix_length = 0;
    $largest = 0;
    foreach ($raw as $key =&gt; $value) {
        if ($prefix_length == 0) {
            // don&#39;t just use $oid&#39;s length since it may be non-numeric
            $prefix_elements = count(explode(&#39;.&#39;,$oid));
            $tmp = &#39;.&#39; . strtok($key, &#39;.&#39;);
            while ($prefix_elements &gt; 1) {
                $tmp .= &#39;.&#39; . strtok(&#39;.&#39;);
                $prefix_elements--;
            }
            $tmp .= &#39;.&#39;;
            $prefix_length = strlen($tmp);
        }
        $key = substr($key, $prefix_length);
        $index = explode(&#39;.&#39;, $key, 2);
        isset($retval[$index[1]]) or $retval[$index[1]] = array();
        if ($largest &amp;lt; $index[0]) $largest = $index[0];
        $retval[$index[1]][$index[0]] = $value;
    }

    if (count($retval) == 0) return ($retval); // no data

    // fill in holes and blanks the agent may &#34;give&#34; you
    foreach($retval as $k =&gt; $x) {
        for ($i = 1; $i &amp;lt;= $largest; $i++) {
        if (! isset($retval[$k][$i])) {
                $retval[$k][$i] = &#39;&#39;;
            }
        }
        ksort($retval[$k]);
    }
    return($retval);
}

?&gt;
&lt;/pre&gt;

&lt;p&gt;define.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php
    define(&#34;DEBUG_DB&#34;,&#34;false&#34;);
    
    define(&#34;ADMIN_MAIL&#34;,&#34;valeranew@ukr.net&#34;);
    define(&#34;DB&#34;,&#34;skmsw&#34;);
    define(&#34;USER&#34;,&#34;skmsw&#34;);
    define(&#34;HOST&#34;,&#34;localhost&#34;);
    define(&#34;DB_PASS&#34;,&#34;password&#34;);
    
    define(&#34;DB_NIBS&#34;,&#34;freenibs&#34;);
    define(&#34;USER_NIBS&#34;,&#34;freenibs&#34;);
    define(&#34;HOST_NIBS&#34;,&#34;localhost&#34;);
    define(&#34;DB_NIBS_PASS&#34;,&#34;password&#34;);
  
    define(&#34;COMUNITY_READ&#34;,&#34;public&#34;);
    define(&#34;COMUNITY_READ2&#34;,&#34;public_snmp&#34;);
    define(&#34;COMUNITY_DEF_DLINK_READ&#34;,&#34;public&#34;);
    /* OID  нормально работает, но приколы вывода:
     * smc: SMC Networks SMC8624T 1
     * dlink : D-Link DES-3026 Fast Ethernet Switch  (D-Link DES-3016 Fast Ethernet Switch)
     * dell :  Ethernet Stackable Switching System  
          PowerConnect 3348 
                    юзать=&gt;&#34;OID_DELL_sysDescr&#34; 
     * extreem : Summit200-48 - Version 7.3e.2 (Build 4) by Release_Master 02/24/05 19:20:09 
     * */
   define(&#34;OID_sysDescr&#34;,&#34;.1.3.6.1.2.1.1.1&#34;); 
   define(&#34;OID_DELL_sysDescr&#34;,&#34;.1.3.6.1.2.1.1.5.0&#34;);
   define(&#34;OID_DELL_enterprises&#34;,&#34;.1.3.6.1.4.1.674&#34;);

    
  define(&#34;OID_standart_ports&#34;,&#34;.1.3.6.1.2.1.2.1.0&#34;);
  define(&#34;OID_dell_ports&#34;,&#34;.1.3.6.1.2.1.2.2.1.7&#34;); /* Включают и вланы IF-MIB::ifAdminStatus.46 = INTEGER: up(1) */
  define(&#34;OID_dell_ports_descr&#34;,&#34;.1.3.6.1.2.1.2.2.1.2&#34;);    
  define(&#34;OID_dell_ports_speed&#34;,&#34;.1.3.6.1.2.1.2.2.1.5&#34;);

  
  define(&#34;OID_mac_on_ports&#34;,&#34;.1.3.6.1.2.1.17.7.1.2.2.1.2&#34;);
  define(&#34;OID_cisco_mac_on_ports&#34;,&#34;.1.3.6.1.2.1.17.4.3.1.1&#34;);
  define(&#34;OID_ports_updown&#34;,&#34;.1.3.6.1.2.1.2.2.1.8&#34;);
  
  
  
  define(&#34;PAGE_MES_1&#34;,&#34;Данные не доступны&#34;);
  define(&#34;PAGE_MES_2&#34;,&#34;Данные o свиче&#34;);
  define(&#34;PAGE_MES_3&#34;,&#34;Тип&#34;);
  define(&#34;PAGE_MES_4&#34;,&#34;Версия&#34;);
  define(&#34;PAGE_MES_5&#34;,&#34;Количество портов&#34;);
?&gt;

&lt;/pre&gt;

&lt;p&gt;PHPTelnet.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php
/*
PHPTelnet 1.1.1
by Antone Roundy
adapted from code found on the PHP website
public domain
*/

class PHPTelnet {
    var $show_connect_error=1;

    var $use_usleep=0;  // change to 1 for faster execution
        // don&#39;t change to 1 on Windows servers unless you have PHP 5
    var $sleeptime=125000;
    var $loginsleeptime=1000000;

    var $fp=NULL;
    var $loginprompt;

    var $conn1;
    var $conn2;
    
    /*
    0 = success
    1 = couldn&#39;t open network connection
    2 = unknown host
    3 = login failed
    4 = PHP version too low
    */
    function Connect($server,$user,$pass) {
        $rv=0;
        $vers=explode(&#39;.&#39;,PHP_VERSION);
        $needvers=array(4,3,0);
        $j=count($vers);
        $k=count($needvers);
        if ($k&lt;$j) $j=$k;
        for ($i=0;$i&lt;$j;$i++) {
            if (($vers[$i]+0)&gt;$needvers[$i]) break;
            if (($vers[$i]+0)&amp;lt;$needvers[$i]) {
                $this-&gt;ConnectError(4);
                return 4;
            }
        }
        
        $this-&gt;Disconnect();
        
        if (strlen($server)) {
            if (preg_match(&#39;/[^0-9.]/&#39;,$server)) {
                $ip=gethostbyname($server);
                if ($ip==$server) {
                    $ip=&#39;&#39;;
                    $rv=2;
                }
            } else $ip=$server;
        } else $ip=&#39;127.0.0.1&#39;;
        
        if (strlen($ip)) {
            if ($this-&gt;fp=fsockopen($ip,23)) {
                fputs($this-&gt;fp,$this-&gt;conn1);
                $this-&gt;Sleep();
                
                fputs($this-&gt;fp,$this-&gt;conn2);
                $this-&gt;Sleep();
                $this-&gt;GetResponse($r);
                $r=explode(&#34;\n&#34;,$r);
                $this-&gt;loginprompt=$r[count($r)-1];

                fputs($this-&gt;fp,&#34;$user\r&#34;);
                $this-&gt;Sleep();

                fputs($this-&gt;fp,&#34;$pass\r&#34;);
                if ($this-&gt;use_usleep) usleep($this-&gt;loginsleeptime);
                else sleep(1);
                $this-&gt;GetResponse($r);
                $r=explode(&#34;\n&#34;,$r);
                if (($r[count($r)-1]==&#39;&#39;)||($this-&gt;loginprompt==$r[count($r)-1])) {
                    $rv=3;
                    $this-&gt;Disconnect();
                }
            } else $rv=1;
        }
        
        if ($rv) $this-&gt;ConnectError($rv);
        return $rv;
    }
    
    function Disconnect($exit=1) {
        if ($this-&gt;fp) {
            if ($exit) $this-&gt;DoCommand(&#39;exit&#39;,$junk);
            fclose($this-&gt;fp);
            $this-&gt;fp=NULL;
        }
    }

    function DoCommand($c,&amp;$r) {
        if ($this-&gt;fp) {
            fputs($this-&gt;fp,&#34;$c\r&#34;);
            $this-&gt;Sleep();
            $this-&gt;GetResponse($r);
            $r=preg_replace(&#34;/^.*?\n(.*)\n[^\n]*$/&#34;,&#34;$1&#34;,$r);
        }
        return $this-&gt;fp?1:0;
    }
    
    function GetResponse(&amp;$r) {
        $r=&#39;&#39;;
        do { 
            $r.=fread($this-&gt;fp,1000);
            $s=socket_get_status($this-&gt;fp);
        } while ($s[&#39;unread_bytes&#39;]);
    }
    
    function Sleep() {
        if ($this-&gt;use_usleep) usleep($this-&gt;sleeptime);
        else sleep(1);
    }
    
    function PHPTelnet() {
        $this-&gt;conn1=chr(0xFF).chr(0xFB).chr(0x1F).chr(0xFF).chr(0xFB).
            chr(0x20).chr(0xFF).chr(0xFB).chr(0x18).chr(0xFF).chr(0xFB).
            chr(0x27).chr(0xFF).chr(0xFD).chr(0x01).chr(0xFF).chr(0xFB).
            chr(0x03).chr(0xFF).chr(0xFD).chr(0x03).chr(0xFF).chr(0xFC).
            chr(0x23).chr(0xFF).chr(0xFC).chr(0x24).chr(0xFF).chr(0xFA).
            chr(0x1F).chr(0x00).chr(0x50).chr(0x00).chr(0x18).chr(0xFF).
            chr(0xF0).chr(0xFF).chr(0xFA).chr(0x20).chr(0x00).chr(0x33).
            chr(0x38).chr(0x34).chr(0x30).chr(0x30).chr(0x2C).chr(0x33).
            chr(0x38).chr(0x34).chr(0x30).chr(0x30).chr(0xFF).chr(0xF0).
            chr(0xFF).chr(0xFA).chr(0x27).chr(0x00).chr(0xFF).chr(0xF0).
            chr(0xFF).chr(0xFA).chr(0x18).chr(0x00).chr(0x58).chr(0x54).
            chr(0x45).chr(0x52).chr(0x4D).chr(0xFF).chr(0xF0);
        $this-&gt;conn2=chr(0xFF).chr(0xFC).chr(0x01).chr(0xFF).chr(0xFC).
            chr(0x22).chr(0xFF).chr(0xFE).chr(0x05).chr(0xFF).chr(0xFC).chr(0x21);
    }
    
    function ConnectError($num) {
        if ($this-&gt;show_connect_error) switch ($num) {
        case 1: echo &#39;

&lt;br /&gt;[PHP Telnet] &lt;a href=&#34;http://www.geckotribe.com/php-telnet/errors/fsockopen.php&#34;&gt;Connect failed: Unable to open network connection&lt;/a&gt;&lt;br /&gt;&#39;; break;
        case 2: echo &#39;&lt;br /&gt;[PHP Telnet] &lt;a href=&#34;http://www.geckotribe.com/php-telnet/errors/unknown-host.php&#34;&gt;Connect failed: Unknown host&lt;/a&gt;&lt;br /&gt;&#39;; break;
        case 3: echo &#39;&lt;br /&gt;[PHP Telnet] &lt;a href=&#34;http://www.geckotribe.com/php-telnet/errors/login.php&#34;&gt;Connect failed: Login failed&lt;/a&gt;&lt;br /&gt;&#39;; break;
        case 4: echo &#39;&lt;br /&gt;[PHP Telnet] &lt;a href=&#34;http://www.geckotribe.com/php-telnet/errors/php-version.php&#34;&gt;Connect failed: Your server\&#39;s PHP version is too low for PHP Telnet&lt;/a&gt;&lt;br /&gt;&#39;; break;
        }
    }
}

return;
?&gt;

&lt;/pre&gt;

&lt;p&gt;telnet.class.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php
/*
$Id: telnet.class.php,v 1.2 2004/03/22 10:01:35 mb Exp $

Originally written by Marc Ennaji (in french),
modified by Matthias Blaser &lt;mb@adfinis.ch&gt;

- translated most function- and variable names from french to english
- added get_buffer-method to get results of the last command
  sent to server
- added hack to get socket_strerror working on old systems

You can find the original class which this translation is based on
on this url: http://px.sklar.com/code.html?id=634

The original class includes a small documentation about using it
in your own applications, but be aware, all functions are in french there, this
one is partly translated.
*/

// hack to get socket_strerror working on old systems
if(!function_exists(&#34;socket_strerror&#34;)){
    function socket_strerror($sh){
        if(function_exists(&#34;strerror&#34;)){
            return strerror($sh);
        } else {
            return false;
        }
    }
}

// telnet class
define (&#34;TELNET_ERROR&#34;, 0);
define (&#34;TELNET_OK&#34;, 1);
define (&#34;TELNET_ASK_CONFIRMATION&#34;, 2);
define (&#34;LIBELLE_CONFIRMATION&#34;, &#34;[confirm]&#34;);

class telnet {

    var $socket  = NULL;
    var $host = &#34;&#34;;
    var $port = &#34;23&#34;;
    var $error = &#34;&#34;;
    var $codeError = &#34;&#34;;
    var $prompt = &#34;\$ &#34;;
    var $log = NULL;  // file handle
    var $repertoireLog= &#34;&#34;;
    var $nomFichierLog = &#34;&#34;;
    var $test;

    var $buffer = &#34;&#34;;

    //------------------------------------------------------------------------
    function connect(){
        $this-&gt;socket = fsockopen($this-&gt;host,$this-&gt;port);

        if (!$this-&gt;socket){
            $this-&gt;error = &#34;unable to open a telnet connection: &#34; . socket_strerror($this-&gt;socket) . &#34;\n&#34;;
            return TELNET_ERROR;
        }

        socket_set_timeout($this-&gt;socket,1,0);
        return TELNET_OK;
    }

    //------------------------------------------------------------------------
    function read_to($chaine){
        $NULL = chr(0);
        $IAC = chr(255);
        $buf = &#39;&#39;;

        if (!$this-&gt;socket){
            $this-&gt;error = &#34;telnet socket is not open&#34;;
            return TELNET_ERROR;
        }

        while (1){
            $c = $this-&gt;getc();

            if ($c === false){
             // plus de caracteres a lire sur la socket
                if ($this-&gt;contientErreur($buf)){
                    return TELNET_ERROR;
                }

                $this-&gt;error = &#34; Couldn&#39;t find the requested : &#39;&#34; . $chaine . &#34;&#39;, it was not in the data returned from server : &#39;&#34; . $buf . &#34;&#39;&#34; ;
                $this-&gt;logger($this-&gt;error);
                return TELNET_ERROR;
            }

            if ($c == $NULL || $c == &#34;\021&#34;){
                continue;
            }

            if ($c == $IAC){
                // Interpreted As Command
                $c = $this-&gt;getc();

                if ($c != $IAC){
                    // car le &#39;vrai&#39; caractere 255 est doublé pour le differencier du IAC
                    if (! $this-&gt;negocierOptionTelnet($c)){
                        return TELNET_ERROR;
                    } else {
                        continue;
                    }
                }

            }

            $buf .= $c;

            // append current char to global buffer
            $this-&gt;buffer .= $c;

            // indiquer à l&#39;utilisateur de la classe qu&#39;il a une demande de confirmation
            if (substr($buf,strlen($buf)-strlen(LIBELLE_CONFIRMATION)) == LIBELLE_CONFIRMATION){
                $this-&gt;logger($this-&gt;getDernieresLignes($buf));
                return TELNET_ASK_CONFIRMATION;
            }

            if ((substr($buf,strlen($buf)-strlen($chaine))) == $chaine){
                // on a trouve la chaine attendue

                $this-&gt;logger($this-&gt;getDernieresLignes($buf));

                if ($this-&gt;contientErreur($buf)){
                    return TELNET_ERROR;
                } else {
                    return TELNET_OK;
                }
            }
        }
    }

    //------------------------------------------------------------------------
    function getc(){
        return fgetc($this-&gt;socket);
    }

    //------------------------------------------------------------------------
    function get_buffer(){
        $buf = $this-&gt;buffer;

        // cut last line (is always prompt)
        $buf = explode(&#34;\n&#34;, $buf);
        unset($buf[count($buf)-1]);
        $buf = join(&#34;\n&#34;,$buf);
        return trim($buf);
    }

    //------------------------------------------------------------------------
    function negocierOptionTelnet($commande){
        // on negocie des options minimales

        $IAC = chr(255);
        $DONT = chr(254);
        $DO = chr(253);
        $WONT = chr(252);
        $WILL = chr(251);

        if (($commande == $DO) || ($commande == $DONT)){
            $opt = $this-&gt;getc();
            //echo &#34;wont &#34;.ord($opt).&#34;\n&#34;;
            fwrite($this-&gt;socket,$IAC.$WONT.$opt);
        } else if (($commande == $WILL) || ($commande == $WONT)) {
            $opt = fgetc($this-&gt;socket);
            //echo &#34;dont &#34;.ord($opt).&#34;\n&#34;;
            fwrite($this-&gt;socket,$IAC.$DONT.$opt);
        } else {
            $this-&gt;error = &#34;Error : unknown command &#34;.ord($commande).&#34;\n&#34;;
            return false;
        }

        return true;
    }

    //------------------------------------------------------------------------
    function write($buffer, $valeurLoggee = &#34;&#34;, $ajouterfinLigne = true){

        // clear buffer from last command
        $this-&gt;buffer = &#34;&#34;;

        if (! $this-&gt;socket){
            $this-&gt;error = &#34;telnet socket is not open&#34;;
            return TELNET_ERROR;
        }

        if ($ajouterfinLigne){
            $buffer .= &#34;\n&#34;;
        }

        if (fwrite($this-&gt;socket,$buffer) &amp;lt; 0){
            $this-&gt;error = &#34;error writing to socket&#34;;
            return TELNET_ERROR;
        }

        if ($valeurLoggee != &#34;&#34;){
            // cacher les valeurs confidentielles dans la log (mots de passe...)
            $buffer = $valeurLoggee . &#34;\n&#34;;
        }

        if (! $ajouterfinLigne){
            // dans la log (mais pas sur la socket), rajouter tout de meme le caractere de fin de ligne
            $buffer .= &#34;\n&#34;;
        }

        $this-&gt;logger(&#34;&gt; &#34; .$buffer);

        return TELNET_OK;
    }

    //------------------------------------------------------------------------
    function disconnect(){
        if ($this-&gt;socket){
            if (! fclose($this-&gt;socket)){
                $this-&gt;error = &#34;error while closing telnet socket&#34;;
                return TELNET_ERROR;
            }

            $this-&gt;socket = NULL;
        }

        $this-&gt;setLog(false,&#34;&#34;);
        return TELNET_OK;
    }

    //------------------------------------------------------------------------
    function contientErreur($buf){
        $messagesErreurs[] = &#34;nvalid&#34;;       // Invalid input, ...
        $messagesErreurs[] = &#34;o specified&#34;;  // No specified atm, ...
        $messagesErreurs[] = &#34;nknown&#34;;       // Unknown profile, ...
        $messagesErreurs[] = &#34;o such file or directory&#34;; // sauvegarde dans un repertoire inexistant
        $messagesErreurs[] = &#34;llegal&#34;;       // illegal file name, ...

        foreach ($messagesErreurs as $erreur){
            if (strpos ($buf, $erreur) === false)
                continue;

                // une erreur est détectée
                $this-&gt;error =  &#34;Un message d&#39;erreur a été détecté dans la réponse de l&#39;hôte distant : &#34; .
                    &#34;

&lt;BR /&gt;&lt;BR /&gt;&#34; . $this-&gt;getDernieresLignes($buf,&#34;&lt;BR /&gt;&#34;) . &#34;&lt;BR /&gt;&#34;;

                return true;
            }

        return false;
    }

    //------------------------------------------------------------------------
    function wait_prompt(){
        return $this-&gt;read_to($this-&gt;prompt);
    }

    //------------------------------------------------------------------------
    function set_prompt($s){
        $this-&gt;prompt = $s;
        return TELNET_OK;
    }

    //------------------------------------------------------------------------
    function set_host($s){
        $this-&gt;host = $s;
    }

    //------------------------------------------------------------------------
    function set_port($s){
        $this-&gt;port = $s;
    }

    //------------------------------------------------------------------------
    function get_last_error(){
        return $this-&gt;error;
    }

    //------------------------------------------------------------------------
    function setLog($activerLog, $traitement){

        if ($this-&gt;log &amp;&amp; $activerLog){
            return TELNET_OK;
        }

        if ($activerLog){
            $this-&gt;repertoireLog =  &#34;/log/&#34; . date(&#34;m&#34;);

            // repertoire mensuel inexistant ?
            if (! file_exists($this-&gt;repertoireLog)){
                if (mkdir($this-&gt;repertoireLog, 0700) === false){
                    $this-&gt;error = &#34;Impossible de créer le repertoire de log &#34; .  $this-&gt;repertoireLog;
                    return TELNET_ERROR;
                }
            }

            global $HTTP_SERVER_VARS;

            $this-&gt;nomFichierLog =  date(&#34;d&#34;) . &#34;_&#34; .
                date(&#34;H:i:s&#34;) . &#34;_&#34; .

            $traitement . &#34;_&#34; .
                $HTTP_SERVER_VARS[&#34;PHP_AUTH_USER&#34;]
                . &#34;.log&#34;;

            $this-&gt;log = fopen($this-&gt;repertoireLog . &#34;/&#34; . $this-&gt;nomFichierLog,&#34;a&#34;);

            if (empty($this-&gt;log)){
                $this-&gt;error = &#34;Impossible de créer le fichier de log &#34; . $this-&gt;nomFichierLog;
                return TELNET_ERROR;
            }

            $this-&gt;logger(&#34;----------------------------------------------\r\n&#34;);
            $this-&gt;logger(&#34;Début de la log de l&#39;utilisateur &#34; . $HTTP_SERVER_VARS[&#34;PHP_AUTH_USER&#34;] .
                &#34;, adresse IP &#34; . $HTTP_SERVER_VARS[&#34;REMOTE_ADDR&#34;] . &#34;\r\n&#34;);

            $this-&gt;logger(&#34;Connexion telnet sur &#34; . $this-&gt;host . &#34;, port &#34; . $this-&gt;port . &#34;\r\n&#34;);
            $this-&gt;logger(&#34;Date : &#34; . date(&#34;d-m-Y&#34;).  &#34;  à &#34; . date(&#34;H:i:s&#34;) . &#34;\r\n&#34;);
            $this-&gt;logger(&#34;Type de traitement effectué : &#34; . $traitement . &#34;\r\n&#34;);
            $this-&gt;logger(&#34;----------------------------------------------\r\n&#34;);
            return TELNET_OK;

        } else {
            if ($this-&gt;log){
                $this-&gt;logger(&#34;----------------------------------------------\r\n&#34;);
                $this-&gt;logger(&#34;Fin de la log\r\n&#34;);

                fflush($this-&gt;log);

                if (! fclose($this-&gt;log)){
                    $this-&gt;error = &#34;erreur a la fermeture du fichier de log&#34;;
                    return TELNET_ERROR;
                }

                $this-&gt;log = NULL;
            }

            return TELNET_OK;
        }
    }

    //------------------------------------------------------------------------
    function logger($s){
        if ($this-&gt;log){
            fwrite($this-&gt;log, $s);
        }
    }

    //------------------------------------------------------------------------
    function getDernieresLignes($s, $separateur=&#34;\n&#34;){
        // une reponse telnet contient (en principe) en premiere ligne l&#39;echo de la commande utilisateur.
        // cette methode renvoie tout sauf la premiere ligne, afin de ne pas polluer les logs telnet

        $lignes = split(&#34;\n&#34;,$s);
        $resultat = &#34;&#34;;
        $premiereLigne = true;

        while(list($key, $data) = each($lignes)){
            if ($premiereLigne){
                $premiereLigne = false;
            } else {
                if ($data != &#34;&#34;){
                    $resultat .= $data . $separateur;
                }
            }
        }

        $resultat == substr($resultat,strlen($resultat)-1); // enlever le dernier caractere de fin de ligne

        return $resultat;
    }

    //------------------------------------------------------------------------
}   //    Fin de la classe
?&gt;

&lt;/pre&gt;

&lt;p&gt;db.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php

class db_mysql{
    protected $query;
    protected $res;
    public $num;
    protected $link;
    protected $debug;
    protected $collation;
    protected $collate;
    protected $host;
    protected $user;
    protected $passw;
    protected $db;
    protected $set_force_featch;
        
    public function  __construct ($HOST,$USER,$PASSW,$DB)
        {
                $this-&gt;query=NULL;
                self::set_debug(false);
                self::set_force_featch(true);
                self::init($HOST,$USER,$PASSW,$DB,false);
        }

        function __destruct()
        {
                    @mysql_close($this-&gt;link); //       @self::close_db();      
        }
        
        public function set_debug($d)   {
                    if(is_bool($d)){
                        $this-&gt;debug=$d;
                    }
                    else{
                        $this-&gt;debug=false;
                    }
        }
                
        public function set_force_featch($d){
                if(is_bool($d)) {
                        $this-&gt;set_force_featch=$d; 
                }
                else    {
                        $this-&gt;set_force_featch=true;
                }
        }
                        
        public function SET_NAMES($names=&#34;utf8&#34;){
            $this-&gt;collation=&#34;SET NAMES &#34;.$names;
            self::query($this-&gt;collation);
        }

        public function SET_COLLATE($names=&#34;utf8_general_ci&#34;){
            $this-&gt;collate=&#34;SET COLLATE &#34;.$names;
            self::query($this-&gt;collation);
        }
        public function  init($HOST,$USER,$PASSW,$DB,$init_collation_setup=false){
                if(!is_bool($init_collation_setup)) {
                        $init_collation_setup=false;    
                }
                self::set_host($HOST);
                self::set_user($USER);
                self::set_passw($PASSW);
                self::set_db($DB);
                $this-&gt;query=NULL;
                if($this-&gt;debug==false){
                        $this-&gt;link=@mysql_connect($this-&gt;host,$this-&gt;user, $this-&gt;passw)or die(ERR1);
                        @mysql_select_db($this-&gt;db,$this-&gt;link) or die(ERR2);
                }
                else
                {
                    $this-&gt;link=@mysql_connect($this-&gt;host,$this-&gt;user, $this-&gt;passw)or die(mysql_error());
                    mysql_select_db($this-&gt;db,$this-&gt;link) or die(mysql_error());
                }
                
                if($init_collation_setup==true){
                        self::query($this-&gt;collation);
                }
        }

        function connect(){
                $this-&gt;query=NULL;
                //$this-&gt;ar=array();
                                
                if($this-&gt;debug==false){
                        $this-&gt;link=@mysql_connect($this-&gt;host,$this-&gt;user, $this-&gt;passw)or die(ERR1);
                        @mysql_select_db($this-&gt;db,$this-&gt;link) or die(ERR2);
                }
                else
                {
                    $this-&gt;link=mysql_connect($this-&gt;host,$this-&gt;user, $this-&gt;passw)or die(mysql_error());
                    mysql_select_db($this-&gt;db,$this-&gt;link) or die(mysql_error());
                }

        }

        public function set_host($host){    $this-&gt;host=$host;  }
        public function set_user($user){    $this-&gt;user=$user;  }
        public function set_passw($passw){  $this-&gt;passw=$passw;    }
        public function set_db($db){    $this-&gt;db=$db;  }
        public function  query($q){
            if($this-&gt;set_force_featch==true)
            {
                $this-&gt;query=@mysql_db_query($this-&gt;db,$q,$this-&gt;link);
            }
            else
            {
                    if($this-&gt;debug==false){
                                $this-&gt;query=@mysql_db_query($this-&gt;db,$q,$this-&gt;link) or die(ERR3);    
                    }
                    else
                    {
                            $this-&gt;query=mysql_db_query($this-&gt;db,$q,$this-&gt;link) or die(mysql_error());
                    }
            }
                
        }
        
        public function num_rows(){
                   $this-&gt;num=mysql_num_rows($this-&gt;query);
                    return $this-&gt;num;
        }
        public function  fetch_row(){
                if($this-&gt;set_force_featch==true)
                    {
                        $this-&gt;res=@mysql_fetch_row($this-&gt;query);
                    }
                    else
                    {
                            if($this-&gt;debug==false){
                                        $this-&gt;res=@mysql_fetch_row($this-&gt;query) or die(ERR4); 
                            }
                            else
                            {
                                    $this-&gt;res=mysql_fetch_row($this-&gt;query) or die(mysql_error());
                            }
                    }
                return $this-&gt;res;
        }
        public function  fetch_array(){
            
            
                   if($this-&gt;set_force_featch==true)
                    {
                        $this-&gt;res=mysql_fetch_array($this-&gt;query);
                    }
                    else
                    {
                            if($this-&gt;debug==false){
                                    $this-&gt;res=@mysql_fetch_array($this-&gt;query) or die(ERR5);   
                            }
                            else
                            {
                                    $this-&gt;res=mysql_fetch_array($this-&gt;query) or die(mysql_error());
                            }
                    }
                return $this-&gt;res;
        }

        public function db_select()
        {
                            if($this-&gt;debug==false){
                                    @mysql_select_db($this-&gt;db,$this-&gt;link) or die(ERR2);   
                            }
                            else
                            {
                                    mysql_select_db($this-&gt;db,$this-&gt;link) or die(mysql_error());
                            }
        }
    public function free_result()
    {
        mysql_free_result($this-&gt;res);
    }
    public function mysql_error(){
        return mysql_error($this-&gt;link);
    }

    public function close_db()
    {
        if($this-&gt;debug==false){
                    @mysql_close($this-&gt;link)or die(ERR6);  
        }
        else
        {
                    mysql_close($this-&gt;link)or die(mysql_error());
        }
    }

}
?&gt;

&lt;/pre&gt;

&lt;p&gt;page.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php 
class page{
    protected $db;
    protected $db_nibs;
    protected $telnet;
    protected $result_telnet_connect;
    protected $sw_type;
    public function __construct (&amp;#038;$db,&amp;#038;$db_nibs){
            $this-&gt;db=&amp;$db;
            $this-&gt;db_nibs=&amp;$db_nibs;
    }
    public function top(){ 
            @include_once(&#34;pages/top.php&#34;); 
    }
    public function bottom(){ 
            @include_once(&#34;pages/bottom.php&#34;); 
    }

    public function telnet_disconnect(){ $this-&gt;telnet-&gt;Disconnect(); }
    public function telnet($ip,$login,$pass){
        $this-&gt;telnet=new PHPTelnet();
        $this-&gt;telnet-&gt;show_connect_error=0;

        // if the first argument to Connect is blank,
        // PHPTelnet will connect to the local host via 127.0.0.1
        $this-&gt;result_telnet_connect = $this-&gt;telnet-&gt;Connect($ip,$login,$pass);
        
        switch ($this-&gt;result_telnet_connect) {
        case 0:
        //$this-&gt;telnet-&gt;DoCommand(&#39;enter command here&#39;, $result);
        // NOTE: $result may contain newlines
        //echo $result;
        //$this-&gt;telnet-&gt;DoCommand(&#39;another command&#39;, $result);
        //echo $result;
        // say Disconnect(0); to break the connection without explicitly logging out
        
            return true;
        break;
        case 1:
        echo &#39;[PHP Telnet] Connect failed: Unable to open network connection&#39;;
        break;
        case 2:
        echo &#39;[PHP Telnet] Connect failed: Unknown host&#39;;
        break;
        case 3:
        echo &#39;[PHP Telnet] Connect failed: Login failed&#39;;
        break;
        case 4:
        echo &#39;[PHP Telnet] Connect failed: Your PHP version does not support PHP Telnet&#39;;
        break;
        }
        return false;
    }
    public function initial_config_sw($ip){
    }
    public function initial_extreme_config_sw($ip){
        //delete vlan Mac
        
    }

    public function save_current_sw_config(){
    }
    public function save_extreme_current_sw_config(){
        $this-&gt;telnet-&gt;DoCommand(&#34;save&#34;, $this-&gt;result_telnet_connect);
        $this-&gt;telnet-&gt;DoCommand(&#34;yes&#34;, $this-&gt;result_telnet_connect);
        $this-&gt;telnet-&gt;DoCommand(&#34;
&#34;, $this-&gt;result_telnet_connect);
    }
    /* $ports_tagged=1,2,3,4,5.... */
    public function create_vlan($vlanid,$ports_tagged,$ports_untagged,$debug=false){
        switch($this-&gt;sw_type){
            case &#34;dlink&#34;:
            break;
            case &#34;dell&#34;:
            break;
            case &#34;extreme&#34;:
                self::create_extreem_vlan($vlanid,$ports_tagged,$ports_untagged,$debug);
            break;
        }
        
    }
    public function create_extreem_vlan($vlanid,$ports_tagged,$ports_untagged,$debug=false){
    if($debug==true){
        echo &#34;create vlan vlan$vlanid\n&#34;;
        echo &#34;configure vlan vlan$vlanid tag $vlanid\n&#34;;
        echo &#34;configure vlan vlan$vlanid add ports  $ports_tagged tagged\n&#34;;
        echo &#34;configure vlan vlan$vlanid add ports  $ports_untagged untagged\n&#34;;
    }
    $this-&gt;telnet-&gt;DoCommand(&#34;create vlan vlan$vlanid&#34;, $this-&gt;result_telnet_connect);
            //create vlan vlan$vlanid
    $this-&gt;telnet-&gt;DoCommand(&#34;configure vlan vlan$vlanid tag $vlanid&#34;, $this-&gt;result_telnet_connect);

    $this-&gt;telnet-&gt;DoCommand(&#34;configure vlan vlan$vlanid add ports  $ports_tagged tagged&#34;, $this-&gt;result_telnet_connect);
    
            //configure vlan vlan$vlanid add ports  $ports_tagged tagged
    $this-&gt;telnet-&gt;DoCommand(&#34;configure vlan vlan$vlanid add ports  $ports_untagged untagged&#34;, $this-&gt;result_telnet_connect);
    
            //configure vlan vlan$vlanid add ports  $ports_untagged untagged
    }

    public function create_dell_vlan($vlanid,$ports_tagged,$ports_untagged,$debug=false){
    if($debug==true){
        echo &#34;configure\n&#34;;
        echo &#34;vlan database\n&#34;;
        echo &#34;vlan $vlanid\n&#34;;
        echo &#34;exit\n&#34;;
    

    }

    /*$this-&gt;telnet-&gt;DoCommand(&#34;configure&#34;, $this-&gt;result_telnet_connect);
    $this-&gt;telnet-&gt;DoCommand(&#34;vlan database&#34;, $this-&gt;result_telnet_connect);
    $this-&gt;telnet-&gt;DoCommand(&#34;vlan $vlanid&#34;, $this-&gt;result_telnet_connect);
    $this-&gt;telnet-&gt;DoCommand(&#34;exit&#34;, $this-&gt;result_telnet_connect);
    */
     $script = new telnet; 
    
    $ar_of_ports_tagged=explode(&#34;,&#34;,$ports_tagged);
    $c=0;
        foreach($ar_of_ports_tagged as $port){
            if(is_numeric($port)&amp;&amp;($port&gt;0)){
                
                if($c==0)
                    $port_line=&#34;1/e&#34;.$port.&#34;,&#34;;
                else
                    $port_line=&#34;,1/e&#34;.$port.&#34;&#34;;
                $c++;
            }
        }
        //exist any ports
        if($c&gt;0){
            
            //$this-&gt;telnet-&gt;DoCommand(&#34;interface range ethernet $port_line&#34;, $this-&gt;result_telnet_connect);
            $this-&gt;telnet-&gt;DoCommand(&#34;switchport access vlan $vlanid&#34;, $this-&gt;result_telnet_connect);
        }
    }


    public function delete_vlan($vlanid){
    }
    public function delete_extreme_vlan($vlanid,$debug=false){
        if($debug==true){
            echo &#34;delete vlan vlan$vlanid\n&#34;;
        }
        $this-&gt;telnet-&gt;DoCommand(&#34;delete vlan vlan$vlanid&#34;, $this-&gt;result_telnet_connect);
        
    }   

    public function remove_port_from_vlan($vlanid,$port_remove){
    }
    public function remove_extreme_port_from_vlan($vlanid,$port_remove){
        //configure vlan vlan$vlanid delete ports  $port_remove
    }
    
    public function add_port_to_vlan($vlanid,$port,$type){
        switch($type){
            case &#34;T&#34;:
            break;
            case &#34;U&#34;:
            break;
        }
    }

    public function scan_sw_by_ip($ip){
                $type=unknown;
                $version=no_version;
                $ports=48;
                $SNMP_COMUNITY_READ=COMUNITY_READ;  
                echo &#34;snmpwalk(&#34;.$ip.&#34;,&#34;.$SNMP_COMUNITY_READ.&#34;,&#34;.OID_sysDescr.&#34;,&#34;.&#34;)&#34;;
                $result=snmpwalk($ip,$SNMP_COMUNITY_READ,OID_sysDescr);
                
                if(strlen($result[0])&lt;2){
                    $SNMP_COMUNITY_READ=COMUNITY_DEF_DLINK_READ;
                //session.version = SNMP_VERSION_2c;
                $result=snmpwalk($ip,$SNMP_COMUNITY_READ,OID_sysDescr);
                }
                if(strlen($result[0])&lt;2){
                    $SNMP_COMUNITY_READ=COMUNITY_READ2;
                $result=snmpwalk($ip,$SNMP_COMUNITY_READ,OID_sysDescr);
                }
                if(strlen($result[0])&lt;2){
                    $type=PAGE_MES_1;
                    $version=no_version;
                    $ports=48;
                    return array(&#34;version&#34;=&gt;$version,&#34;type&#34;=&gt;$type,&#34;ports&#34;=&gt;$ports,&#34;ip&#34;=&gt;$ip);
                }
                else{
                    $result=$result[0];
                    //echo print_r($result);
                    /* OID  ????????? ????????, ?? ??????? ??????:
                    * dlink : D-Link DES-3026 Fast Ethernet Switch
                    * dell :  Ethernet Stackable Switching System  
                        PowerConnect 3348 
                                    ?????=&gt;&#34;OID_DELL_sysDescr&#34; 
                    * extreem : Summit200-48 - Version 7.3e.2 (Build 4) by Release_Master 02/24/05 19:20:09 
                    * SMC: SMC Networks SMC8624T 1
                    * */
                    $dlink_oid_pattern=&#34;/\bD-Link\b/i&#34;;
                    $dlink_oid_pattern2=&#34;/\bDLink\b/i&#34;;
                    $dlink_oid_pattern3=&#34;/\bDES\b/i&#34;;
                    $extreem_oid_pattern=&#34;/\bSummit/i&#34;;
                    $smc_oid_pattern=&#34;/\bSMC/i&#34;;
                    $dell_oid_pattern=&#34;/\bStackable\b/i&#34;;
                    $dell__oid_pattern=&#34;/\bEthernet\b/i&#34;;
                    $dell2_oid_pattern=&#34;/\bPowerConnect\b/i&#34;;
                    $dell_ports_24_patern=&#34;/\d\d24/&#34;;
                    $dell_ports_48_patern=&#34;/\d\d48/&#34;;
                    $cisco_oid_pattern=&#34;/\bcisco\b/i&#34;;
                    $cisco2_oid_pattern=&#34;/\bCISCO \b/i&#34;;
                    $netgear_FSM_pattern=&#34;/\bFSM/i&#34;;
                    
                if( ( preg_match($dlink_oid_pattern,$result))|| (preg_match($dlink_oid_pattern2,$result)) || (preg_match($dlink_oid_pattern3,$result))){
                    $type=dlink;
                    $version=$result;
                    $result=@snmpwalk($ip,$SNMP_COMUNITY_READ,OID_standart_ports);
                    $ports=48;
                        if(preg_match(&#34;/3026/&#34;,$version)){
                                    $ports=24;
                        }elseif(preg_match(&#34;/3028/&#34;,$version)){
                                    $ports=24;
                        }elseif(preg_match(&#34;/3528/&#34;,$version)){
                                    $ports=24;
                        }elseif(preg_match(&#34;/3526/&#34;,$version)){
                                    $ports=24;
                        }elseif(preg_match(&#34;/3026/&#34;,$version)){
                                    $ports=24;
                        }elseif(preg_match(&#34;/3016/&#34;,$version)){
                                    $ports=16;
                        }elseif(preg_match(&#34;/3010/&#34;,$version)){
                                    $ports=10;
                        }
                         
                }
                elseif(preg_match($extreem_oid_pattern,$result)){
                    $type=&#34;extreem&#34;;
                    $version=$result;
                    $result=@snmpwalk($ip,$SNMP_COMUNITY_READ,OID_standart_ports);
                    $ports=48;
                    
                }elseif(preg_match($netgear_FSM_pattern,$result)){
                    $type=&#34;netgear&#34;;
                    $version=str_replace(&#34;Stackable Switch&#34;,&#34;&#34;,$result);
                    $ports=48;                  
                    if(preg_match(&#34;/FSM7328S/&#34;,$version)){
                                    $ports=24;
                        }elseif(preg_match(&#34;/FSM7352S/&#34;,$version)){
                                    $ports=48;
                        }
                    
                }
                elseif((preg_match($cisco_oid_pattern,$result))|| (preg_match($cisco2_oid_pattern,$result)) ){
                    $type=&#34;cisco&#34;;
                    $version=$result;
                    //$result=@snmpwalk($ip,$SNMP_COMUNITY_READ,OID_standart_ports);
                    $ports=48;
                        if(preg_match(&#34;/C3500/&#34;,$version)){
                            $ports=48;
                            $version=&#34;Cisco C3500XL&#34;;
                        }else if(preg_match(&#34;/WS-C2948/&#34;,$version)){
                                                         $ports=48;
                                                         $version=&#34;Cisco WS-C2948&#34;;
                                                 }
                }
                elseif(preg_match($smc_oid_pattern,$result)){
                    $type=&#34;SMC&#34;;
                    $version=$result;
                    $ports=48;
                        if(preg_match(&#34;/8624/&#34;,$version)){
                                    $ports=24;
                        }
                    
                }
                elseif((preg_match($dell_oid_pattern,$result))||(preg_match($dell__oid_pattern,$result))){
                    $result=@snmpwalk($ip,$SNMP_COMUNITY_READ,OID_DELL_enterprises);
                        $type=&#34;dell_un&#34;;
                        $version=$result;
                        $ports=48;
                        foreach($result as $key){
                        if(preg_match($dell2_oid_pattern,$key)){
                            $version=&#34;Dell &#34;.str_replace(&#34;\&#34;&#34;,&#34;&#34;,$key);
                            $type=&#34;dell&#34;;
                            if(preg_match($dell_ports_48_patern,$key)){
                                $ports=48;
                            }elseif(preg_match($dell_ports_24_patern,$key)){
                                $ports=24;
                            }
                            $arr=array();
                            break;
                        }
                    }

                }
                echo &#34;type $type \&#34;ports\&#34;=&gt;$ports,\&#34;ip\&#34;=&gt;$ip)\n&#34;;
                return array(&#34;version&#34;=&gt;str_replace(&#34;STRING:&#34;,&#34;&#34;,$version),&#34;type&#34;=&gt;$type,&#34;ports&#34;=&gt;$ports,&#34;ip&#34;=&gt;$ip);
            }
            
    }
    public function arpwatch_macs(){
        $q=&#34;DELETE FROM  `freenibs`  WHERE `user` LIKE &#39;10.%&#39;&#34;;
        $this-&gt;db-&gt;query($q);
        $q=&#34;DELETE FROM 
                `arpwatch`
                WHERE `date` &lt; FROM_UNIXTIME( UNIX_TIMESTAMP( NOW( ) ) -604000 )&#34;;
        $this-&gt;db_nibs-&gt;query($q);
        $q=&#34;SELECT *
            FROM `arpwatch` ORDER BY `date&#34;;
        $this-&gt;db_nibs-&gt;query($q);
        $n=$this-&gt;db_nibs-&gt;num_rows();
        if($n&gt;0){
            for($i=0;$i&lt;$n;$i++){
                $row=$this-&gt;db_nibs-&gt;fetch_array();
                $ip=$row[&#39;ip&#39;];
                $mac=$row[&#39;arp&#39;];
                $q=&#34;INSERT INTO `freenibs` (
                        `mac` ,
                        `user` ,
                        `deposit`
                        )
                        VALUES (
                        &#39;&#34;.quote_smart(strtolower($mac)).&#34;&#39;,&#39;&#34;.quote_smart($ip).&#34;&#39;, &#39;-2048&#39;
                        )
                         ON DUPLICATE KEY UPDATE
                        `user`=&#39;&#34;.quote_smart($ip).&#34;&#39;
                    ;&#34;;
                $this-&gt;db-&gt;query($q);
            }
                
       }
    }
    public function clear_(){   
    $q=&#34;DELETE FROM `mac` WHERE `date` &lt; FROM_UNIXTIME( UNIX_TIMESTAMP( NOW( ) ) -86400 )
        AND `mac` NOT
        IN (
        
        SELECT `mac`
        FROM `freenibs`
        )&#34;;
    $this-&gt;db-&gt;query($q);
        $q=&#34;DELETE FROM `mac` WHERE `date` &lt; FROM_UNIXTIME( UNIX_TIMESTAMP( NOW( ) ) -259200 )
        AND `mac` 
        IN (
        
        SELECT `mac`
        FROM `freenibs`
        )&#34;;
    $this-&gt;db-&gt;query($q);
    }
    public function cron (){
        self::clear_();
        self::arpwatch_macs();
        self::users_macs();
        $field_to_select=&#34;INET_NTOA(`ip`) AS `nas_ip`,`id`,`type`,`name`,`model` AS `version`,`ports`&#34;;
        $q=&#34;SELECT 
                &#34;.$field_to_select.&#34;
            FROM `sw`
                  ORDER BY `id`&#34;;
        //echo $q;
        $this-&gt;db-&gt;query($q);
        $n=$this-&gt;db-&gt;num_rows();
        $query=array();
        if($n&gt;0){
            echo &#39;#!/bin/sh&#39;.&#34;\n&#34;;
            $zzz=0;
            for($i=0;$i&lt;$n;$i++){
            $zzz++; 
                $row=$this-&gt;db-&gt;fetch_array();
                echo &#34;/usr/bin/php -q /var/www/skmsw/cron_one_ip.php &#34;.$row[&#39;nas_ip&#39;].&#34; &gt;&gt;/dev/null &amp;\n&#34;;
                passthru(&#34;/usr/bin/php -q /var/www/skmsw/cron_one_ip.php &#34;.$row[&#39;nas_ip&#39;].&#34; &gt;&gt;/dev/null &amp;&#34;);
            if(zzz&gt;4){ sleep(5); $zzz=0; }
            }
        }
        $dis=self::clear_disallow();
    }
    public function cron_one_ip($ip){
        echo &#34;clear_disallow_ip($ip)\n&#34;;
        $dis=self::clear_disallow_ip($ip);
        echo &#34; done clear_disallow_ip($ip)\n&#34;;
        echo &#34;scan_by_ip_switch($dis,$ip);\n&#34;;
        self::scan_by_ip_switch($dis,$ip);
        echo &#34; done scan&#34;;
        //$dis=self::clear_disallow();
    }
    public function clear_disallow_ip($ip){
        if(strlen($ip)&gt;0)
        $q=&#34;SELECT 
                INET_NTOA(`ip`) AS `nas_ip`,`id`,`disallow_ports` AS `ports`
            FROM `sw`
            WHERE `ip`=INET_ATON(&#39;&#34;.$ip.&#34;&#39;)&#34;;
        else
        $q=&#34;SELECT 
                INET_NTOA(`ip`) AS `nas_ip`,`id`,`disallow_ports` AS `ports`
            FROM `sw`&#34;;
        $this-&gt;db-&gt;query($q);
        $n=$this-&gt;db-&gt;num_rows();
        //echo $q.&#34;\n&#34;;
        if($n&gt;0){
            for($i=0;$i&lt;$n;$i++){
                 $row=$this-&gt;db-&gt;fetch_array();
                     if(strlen($row[&#39;ports&#39;])&gt;0)
                         $disallow[]=array(&#34;ip&#34;=&gt;$row[&#39;nas_ip&#39;],&#34;ports&#34;=&gt;$row[&#39;ports&#39;],&#34;id&#34;=&gt;$row[&#39;id&#39;]);
                         $dis[$row[&#39;nas_ip&#39;]]=array(&#34;ip&#34;=&gt;$row[&#39;nas_ip&#39;],&#34;ports&#34;=&gt;$row[&#39;ports&#39;],&#34;id&#34;=&gt;$row[&#39;id&#39;]);
                         
            }
        }
        foreach($disallow as $disallow_array){
            $ip=$disallow_array[&#39;ip&#39;];
            $id=$disallow_array[&#39;id&#39;];
            $p=explode(&#34;,&#34;,$disallow_array[&#39;ports&#39;]);
            foreach($p as $port_val){
                $q=&#34;DELETE FROM `mac` WHERE `sw_id` = &#39;&#34;.quote_smart($id).&#34;&#39; AND `port`=&#39;&#34;.quote_smart($port_val).&#34;&#39;&#34;;
                //echo $q.&#34;\n&#34;;
                $this-&gt;db-&gt;query($q);
            }
        }
        return $dis;
    }
    public function clear_disallow(){
        $q=&#34;SELECT 
                INET_NTOA(`ip`) AS `nas_ip`,`id`,`disallow_ports` AS `ports`
            FROM `sw`&#34;;
        $this-&gt;db-&gt;query($q);
        $n=$this-&gt;db-&gt;num_rows();
        //echo $n.&#34;\n&#34;;
        if($n&gt;0){
            for($i=0;$i&lt;$n;$i++){
                 $row=$this-&gt;db-&gt;fetch_array();
                     if(strlen($row[&#39;ports&#39;])&gt;0)
                         $disallow[]=array(&#34;ip&#34;=&gt;$row[&#39;nas_ip&#39;],&#34;ports&#34;=&gt;$row[&#39;ports&#39;],&#34;id&#34;=&gt;$row[&#39;id&#39;]);
                         $dis[$row[&#39;nas_ip&#39;]]=array(&#34;ip&#34;=&gt;$row[&#39;nas_ip&#39;],&#34;ports&#34;=&gt;$row[&#39;ports&#39;],&#34;id&#34;=&gt;$row[&#39;id&#39;]);
                         
            }
        }
        foreach($disallow as $disallow_array){
            $ip=$disallow_array[&#39;ip&#39;];
            $id=$disallow_array[&#39;id&#39;];
            $p=explode(&#34;,&#34;,$disallow_array[&#39;ports&#39;]);
            foreach($p as $port_val){
                $q=&#34;DELETE FROM `mac` WHERE `sw_id` = &#39;&#34;.quote_smart($id).&#34;&#39; AND `port`=&#39;&#34;.quote_smart($port_val).&#34;&#39;&#34;;
                //echo $q.&#34;\n&#34;;
                $this-&gt;db-&gt;query($q);
            }
        }
        return $dis;
    }
    public function users_macs(){   
        $q=&#34;SELECT `actions`.`call_from`,`actions`.`user`,`users`.`uid`,`users`.`deposit`,`users`.`credit`
            FROM `actions`, `users`
            WHERE 
                `actions`.`call_from` LIKE &#39;%:%&#39;
            AND 
                `users`.`user`=`actions`.`user`
                AND
                    `start_time`&gt;FROM_UNIXTIME(UNIX_TIMESTAMP(NOW() )-90000)
            GROUP BY `actions`.`call_from`&#34;;
        $this-&gt;db_nibs-&gt;query($q);
        $n=$this-&gt;db_nibs-&gt;num_rows();
        if($n&gt;0){
            for($i=0;$i&lt;$n;$i++){
             $row=$this-&gt;db_nibs-&gt;fetch_array();
            $m=explode(&#34;/&#34;,$row[&#39;call_from&#39;]); //10.200.30.16 / 00:1d:92:f7:46:60 / vlan51
            $mac=strtolower(trim($m[1]));
            $user=$row[&#39;user&#39;];
            $uid=$row[&#39;uid&#39;];
            $deposit=$row[&#39;deposit&#39;]+$row[&#39;credit&#39;];
            $q=&#34;INSERT INTO  `freenibs` (
                    `mac` ,
                    `user`,
                    `uid`,
                    `deposit`
                    )
                    VALUES (
                    &#39;&#34;.quote_smart($mac).&#34;&#39;, &#39;&#34;.quote_smart($user).&#34;&#39;,&#39;&#34;.quote_smart($uid).&#34;&#39;,&#39;&#34;.quote_smart($deposit).&#34;&#39;
                    )
                    ON DUPLICATE KEY UPDATE
                    `mac`=&#39;&#34;.quote_smart($mac).&#34;&#39;, `user`=&#39;&#34;.quote_smart($user).&#34;&#39;,`uid`=&#39;&#34;.quote_smart($uid).&#34;&#39;,`deposit`=&#39;&#34;.quote_smart($deposit).&#34;&#39;;&#34;;
                $this-&gt;db-&gt;query($q);
            }
        }
        $q=&#34;SELECT `blocked`,`mac_addr`,`user`,`uid`,`deposit`,`credit` FROM `users` WHERE `mac_addr` LIKE &#39;%:%&#39;&#34;;
        $this-&gt;db_nibs-&gt;query($q);
        $n=$this-&gt;db_nibs-&gt;num_rows();
    if($n&gt;0){
        for($i=0;$i&lt;$n;$i++){
             $row=$this-&gt;db_nibs-&gt;fetch_array();
            $mac=strtolower($row[&#39;mac_addr&#39;]);
            $user=$row[&#39;user&#39;];
            $uid=$row[&#39;uid&#39;];
            $deposit=$row[&#39;deposit&#39;]+$row[&#39;credit&#39;];
            //echo $user.&#34; &#34;.$mac.&#34;\n&#34;;
            $blocked=$row[&#39;blocked&#39;];

            $q=&#34;INSERT INTO `freenibs` (
                    `mac` ,
                    `user`,
                    `uid`,
                    `deposit`
                    )
                    VALUES (
                    &#39;&#34;.quote_smart($mac).&#34;&#39;, &#39;&#34;.quote_smart($user).&#34;&#39;,&#39;&#34;.quote_smart($uid).&#34;&#39;,&#39;&#34;.quote_smart($deposit).&#34;&#39;
                    )
                    ON DUPLICATE KEY UPDATE
                    `en`=&#39;&#34;.quote_smart($blocked).&#34;&#39;,`mac`=&#39;&#34;.quote_smart($mac).&#34;&#39;, `user`=&#39;&#34;.quote_smart($user).&#34;&#39;,`uid`=&#39;&#34;.quote_smart($uid).&#34;&#39;,`deposit`=&#39;&#34;.quote_smart($deposit).&#34;&#39;;&#34;;
                    $this-&gt;db-&gt;query($q);
        }
      }
    }
    public function user_to_port_sw(){

        
    }
    
    public function scan_macs_from_ip($ip,$nas_id,$dis,$type,$model){
                $disallow=$dis[$ip];
                $p=explode(&#34;,&#34;,$disallow[&#39;ports&#39;]);
                $SNMP_COMUNITY_READ=COMUNITY_READ;
                if($ip==&#39;127.0.0.1&#39;){
                    //трюк для ЦИСКИ, так как ей надо указывать комьюнити в виде community@vlan
                     $SNMP_COMUNITY_READ=&#34;public@25&#34;;
                }
                $result=snmpwalk($ip,$SNMP_COMUNITY_READ,OID_sysDescr);
                if(strlen($result[0])&lt;2){
                    $SNMP_COMUNITY_READ=COMUNITY_DEF_DLINK_READ;
                    $result=snmpwalk($ip,$SNMP_COMUNITY_READ,OID_sysDescr);
                }
                if(strlen($result[0])&lt;2){
                    $SNMP_COMUNITY_READ=COMUNITY_READ2;
                $result=snmpwalk($ip,$SNMP_COMUNITY_READ,OID_sysDescr);
                }
                echo &#34;SNMP_COMUNITY_READ $SNMP_COMUNITY_READ\n&#34;;
                if(strlen($result[0])&lt;2){
                    return array();
                }
                else{
                    if($type==&#34;cisco&#34;)
                        $res=snmprealwalk($ip,$SNMP_COMUNITY_READ,OID_cisco_mac_on_ports);
                    else{
                        //$res=snmp2_real_walk($ip,$SNMP_COMUNITY_READ,OID_mac_on_ports);
                        $res=snmprealwalk($ip,$SNMP_COMUNITY_READ,OID_mac_on_ports);
                        //print_r($res);
                    }

                    /*  old cisco
                     $res=snmprealwalk($ip,&#34;public@54&#34;,&#34;.1.3.6.1.2.1.17.4.3.1.2&#34;);
                                         foreach ($res as $ind=&gt;$port){
                                             $arr=explode(&#39;.&#39;,$ind);
                                                $c=count($arr);
                                                 $port=explode(&#39;:&#39;,$port);
                                                 $port_temp=$port;
                                                 $port=(int)$port[1];
                                         if($ip==&#39;172.16.2.26&#39;){
                                                $port=$cisco_rp[$port];
                                          }

                                          $mc=dec_hex($arr[$c-6]).&#39;:&#39;.dec_hex($arr[$c-5]).&#39;:&#39;.dec_hex($arr[$c-4]).&#39;:&#39;.dec_hex($arr[$c-3]).&#39;:&#39;.dec_hex($arr[$c-2]).&#39;:&#39;.dec_hex($arr[$c-1]);
                                                 $mac=strtolower($mc);
                                             $main[$mac]=$port;
                                             echo $mac.&#34; - $port - $port_t[0]--.1.3.6.1.2.1.17.1.4.1.2.&#34;.$port.&#34;\n&#34;;
                                         }
                    */

                    foreach ($main as $mac=&gt;$port){
                        if(!(in_array($port,$p))){
                        $query=&#34;
                         INSERT INTO `mac` (
                            
                            `mac` ,
                            `sw_id`,
                            `port`,
                            `date`
                            )
                            VALUES (
                            &#39;&#34;.quote_smart($mac).&#34;&#39; , &#39;&#34;.quote_smart($nas_id).&#34;&#39;, &#39;&#34;.quote_smart($port).&#34;&#39;,NOW()
                            )
                            ON DUPLICATE KEY UPDATE
                            `mac`=&#39;&#34;.quote_smart($mac).&#34;&#39; , 
                            `sw_id`=&#39;&#34;.quote_smart($nas_id).&#34;&#39;, 
                            `port`=&#39;&#34;.quote_smart($port).&#34;&#39;,
                            `date`=NOW();&#34;;
                            
                        $this-&gt;db-&gt;query($query);
                    }
                    }
                                        
                }
    }
    
    public function scan_all_switches($dis){
        $field_to_select=&#34;INET_NTOA(`ip`) AS `nas_ip`,`id`,`type`,`name`,`model` AS `version`,`ports`&#34;;
        $q=&#34;SELECT 
                &#34;.$field_to_select.&#34;
            FROM `sw`
                  ORDER BY `id`&#34;;
        $this-&gt;db-&gt;query($q);
        $n=@$this-&gt;db-&gt;num_rows();
        $query=array();
        if($n&gt;0){
            for($i=0;$i&lt;$n;$i++){
                $row=$this-&gt;db-&gt;fetch_array();
                $sw=self::scan_sw_by_ip($row[&#39;nas_ip&#39;],$dis);
                $switches[]=array(
                        &#34;ip&#34;=&gt;$row[&#39;nas_ip&#39;],
                        &#34;id&#34;=&gt;$row[&#39;id&#39;],
                        &#34;type&#34;=&gt;$row[&#39;type&#39;],
                        &#34;model&#34;=&gt;$row[&#39;model&#39;],
                        &#34;disallow_ports&#34;=&gt;$row[&#39;disallow_ports&#39;]
                        );
                
                echo &#34;process &#34;.$row[&#39;nas_ip&#39;].&#34;\n&#34;;
                if($sw[&#39;type&#39;]!=&#34;unknown&#34;){
                $q1=&#34;UPDATE
                    `sw`    SET
                            `type`=&#39;&#34;.quote_smart($sw[&#39;type&#39;]).&#34;&#39;,  
                            `model`=&#39;&#34;.quote_smart($sw[&#39;version&#39;]).&#34;&#39;, 
                            `ports`=&#39;&#34;.quote_smart($sw[&#39;ports&#39;]).&#34;&#39;
                    WHERE
                        `id`=&#39;&#34;.quote_smart($row[&#39;id&#39;]).&#34;&#39;&#34;;
                $query[]=array(&#34;d&#34;=&gt;$q,&#34;u&#34;=&gt;$q1);
                }
            }
            foreach($query as $qw){
                $this-&gt;db-&gt;query($qw[&#39;u&#39;]);
            }
            foreach($switches as $switch){
                echo &#34;process mas on &#34;.$switch[&#39;ip&#39;].&#34; id:&#34;.$switch[&#39;id&#39;].&#34;\n&#34;;
                self::scan_macs_from_ip($switch[&#39;ip&#39;],$switch[&#39;id&#39;],$dis,$switch[&#39;type&#39;],$switch[&#39;model&#39;]);
            }
        }
        if(DEBUG_DB==&#34;true&#34;)
                    echo $this-&gt;db-&gt;mysql_error();  
    }
    public function scan_by_ip_switch($dis,$ip){
        $field_to_select=&#34;INET_NTOA(`ip`) AS `nas_ip`,`id`,`type`,`name`,`model` AS `version`,`ports`&#34;;
        $q=&#34;SELECT 
                &#34;.$field_to_select.&#34;
            FROM `sw`
            WHERE
                `ip`=INET_ATON(&#39;&#34;.$ip.&#34;&#39;)
                  ORDER BY `id`&#34;;
        $this-&gt;db-&gt;query($q);
        $n=$this-&gt;db-&gt;num_rows();
        $query=array();
        if($n&gt;0){
            
            for($i=0;$i&lt;$n;$i++){
                $row=$this-&gt;db-&gt;fetch_array();
                $sw=self::scan_sw_by_ip($row[&#39;nas_ip&#39;],$dis);
                $switches[]=array(
                        &#34;ip&#34;=&gt;$row[&#39;nas_ip&#39;],
                        &#34;id&#34;=&gt;$row[&#39;id&#39;],
                        &#34;type&#34;=&gt;$row[&#39;type&#39;],
                        &#34;model&#34;=&gt;$row[&#39;model&#39;],
                        &#34;disallow_ports&#34;=&gt;$row[&#39;disallow_ports&#39;]
                        );
                
                echo &#34;process &#34;.$row[&#39;nas_ip&#39;].&#34;\n&#34;;
                $q=&#34;D ELETE FROM `sw` WHERE `id`=&#39;&#34;.quote_smart($row[&#39;id&#39;]).&#34;&#39;;&#34;;
                $q1=&#34;UPDATE
                    `sw`    SET
                            `type`=&#39;&#34;.quote_smart($sw[&#39;type&#39;]).&#34;&#39;,  
                            `model`=&#39;&#34;.quote_smart($sw[&#39;version&#39;]).&#34;&#39;, 
                            `ports`=&#39;&#34;.quote_smart($sw[&#39;ports&#39;]).&#34;&#39;
                    WHERE
                        `id`=&#39;&#34;.quote_smart($row[&#39;id&#39;]).&#34;&#39;&#34;;
                $query[]=array(&#34;d&#34;=&gt;$q,&#34;u&#34;=&gt;$q1);               
            }
            foreach($query as $qw){
                //echo $qw[&#39;u&#39;].&#34;\n&#34;;
                $this-&gt;db-&gt;query($qw[&#39;u&#39;]);
            }
            foreach($switches as $switch){
                echo &#34;process on switch: &#34;.$switch[&#39;ip&#39;].&#34; id:&#34;.$switch[&#39;id&#39;].&#34;\n&#34;;
                self::scan_macs_from_ip($switch[&#39;ip&#39;],$switch[&#39;id&#39;],$dis,$switch[&#39;type&#39;],$switch[&#39;model&#39;]);
            }
        }
        if(DEBUG_DB==&#34;true&#34;)
                    echo $this-&gt;db-&gt;mysql_error();  
    }
    
    public function show_all_sw(){
    $field_to_select=&#34;
            `freenibs`.`mac`,`freenibs`.`user`,`freenibs`.`uid`,`freenibs`.`deposit`,
            `mac`.`port`,`mac`.`sw_id`,
            `sw`.`name`,`sw`.`id`, INET_NTOA(`sw`.`ip`) AS `nas_ip`,`sw`.`type`,`sw`.`model` AS `version`,`sw`.`ports`,`sw`.`addr`
             &#34;;                 
    switch($_GET[&#39;sort&#39;]){
    case &#34;ul&#34;:
        $q=&#34;SELECT 
                &#34;.$field_to_select.&#34;
            FROM `freenibs`,`mac`,`sw`
            WHERE
                    `mac`.`mac`=`freenibs`.`mac`
                AND
                    `sw`.`id`=`mac`.`sw_id` 
                  ORDER BY `sw`.`id`    &#34;;
    break;
    case &#34;id&#34;:
        if(strlen($_GET[&#39;id&#39;])&gt;1){
            $add_=&#34; 
                    `id`=&#39;&#34;.quote_smart($_GET[&#39;id&#39;]).&#34;&#39;&#34;;
        }
        $q=&#34;SELECT  
                &#34;.$field_to_select.&#34;
            FROM 
                    `freenibs`,`mac`,`sw`
            WHERE
                &#34;.$add_.&#34;
                AND
                    `mac`.`mac`=`freenibs`.`mac`
                AND
                    `sw`.`id`=`mac`.`sw_id` 
                  ORDER BY 
                        `sw`.`id`,`sw`.`ports`
                        &#34;;
            //echo $q;
    break;
    case &#34;type&#34;:
        switch($_GET[&#39;sub_type&#39;]){
        default:
            if(strlen($_GET[&#39;sub_type&#39;])&gt;1){
                $add_=&#34;
                     
                        `sw`.`type` =&#39;&#34;.quote_smart($_GET[&#39;sub_type&#39;]).&#34;&#39;
                        &#34;;
            }
            
            $q=&#34;SELECT  
                &#34;.$field_to_select.&#34;
            FROM 
                    `freenibs`,`mac`,`sw`
            WHERE
                    `mac`.`mac`=`freenibs`.`mac`
                AND
                    `sw`.`id`=`mac`.`sw_id` 
                AND
                        
                  &#34;.$add_.&#34;
                
                
                  ORDER BY 
                        `sw`.`type`,`sw`.`name`,`mac`.`port`
                        &#34;;
        break;
        }
    break;


    default:
        $q=&#34;SELECT  
                &#34;.$field_to_select.&#34;
            FROM 
                    `freenibs`,`mac`,`sw`
            WHERE
                    `mac`.`mac`=`freenibs`.`mac`
                AND
                    `sw`.`id`=`mac`.`sw_id` 
                
                  ORDER BY `sw`.`id`,`mac`.`port`
                        &#34;;
        
    break;      
    }
        $this-&gt;db-&gt;query($q);
        $n=$this-&gt;db-&gt;num_rows();
        $c=0;
            if($n&gt;0){
                
                $nasid=-1;
                $nastemp=-1;
                $ports=array();

                $n_of_ports=48;
                        $header_sw.=&#34;

&lt;td&gt;
  &lt;a href=\&#34;?sort=ul\&#34;&gt;Àäðåññ&lt;/a&gt;
  
  &lt;td&gt;
    &lt;td&gt;
      &lt;a href=\&#34;?sort=id\&#34;&gt;ID&lt;/a&gt;
      
      &lt;td&gt;
        &lt;td&gt;
          &lt;a href=\&#34;?sort=type\&#34;&gt;type&lt;/a&gt;
          
          &lt;td&gt;
            &#34;;
                                
                                    echo $header_sw;
                                echo &#34;
                                &lt;div style=\&#34;font-size:12px\&#34;&gt;&lt;table  border=\&#34;1px\&#34;&gt;
            
            &lt;tr&gt;
              &#34;;
                            if(strlen($_GET[&#39;id&#39;])&gt;1) $n++;
                            for($i=0;$i&lt;$n;$i++){
                                if( !( (strlen($_GET[&#39;id&#39;])&gt;1)&amp;&amp;($i==$n))){
                                     $row=$this-&gt;db-&gt;fetch_array();
                                    $nasid=$row[&#39;id&#39;];
                                    
                                }
                                else{
                                  $nasid++;
                                 
                                }
                                
                                    if($i==0) {
                                        $nasid=$row[&#39;id&#39;];
                                        $nastemp=$nasid;
                                        $temp_nas_ip=$row[&#39;nas_ip&#39;];
                                        $temp_name=$row[&#39;name&#39;];
                                        $temp_type=$row[&#39;type&#39;];
                                        $temp_id=$row[&#39;id&#39;];
                                        $temp_ports=$row[&#39;ports&#39;];
                                        $temp_version=$row[&#39;version&#39;];
                                        if(preg_match(&#34;/\bVersion/i&#34;,$row[&#39;version&#39;])){
                                                $temp_version=explode(&#34;Version&#34;,$row[&#39;version&#39;]);
                                                $row[&#39;version&#39;]=$temp_version[&#39;0&#39;];
                                                $temp_version=$row[&#39;version&#39;];
                                            }
                                    }
                                    
                                    if($nastemp!=$nasid){
                                        if($_GET[&#39;snmp&#39;]==&#34;true&#34;)
                                            $sw_res=self::scan_sw_by_ip($temp_nas_ip);
              
                                              if( ($temp_ports&gt;0)&amp;&amp;($temp_ports&lt;100))
                                                $n_of_ports=$temp_ports;
                                              else
                                                $n_of_ports=48;
              
                                            $c++;
                                            if($c&gt;1){
                                                $c=0;
                                                $td_pre=&#34; border=\&#34;1px\&#34; &#34;;
                                            }
                                            else {
                                                $td_pre=&#39; &#39;;
                                            }
                                            echo &#34;
                                            
                                            &lt;tr &#34;.$td_pre.&#34;&gt;
                                                 &lt;td  rowspan=\&#34;2\&#34; nowrap=\&#34;nowrap\&#34; bgcolor=\&#34;#999999\&#34;&gt;
                                            &lt;a href=\&#34;http://&#34;.$temp_nas_ip.&#34;\&#34;  target=\&#34;_blank\&#34;&gt;&#34;.$temp_name.&#34;&lt;/a&gt;
                                                &lt;br /&gt;&#34;.str_replace(&#34;Fast Ethernet Switch&#34;,&#34;&#34;,$temp_version).&#34;
                                        &lt;/td&gt;
                                        &lt;td rowspan=\&#34;2\&#34;&gt;
                                            &lt;a href=\&#34;?sort=id&amp;id=&#34;.$temp_id.&#34;\&#34; target=\&#34;_blank\&#34;&gt; &#34;.$temp_id.&#34;&lt;/a&gt;&lt;/td&gt;
                                        &lt;td &#34;.$td_pre.&#34; rowspan=\&#34;2\&#34;&gt;
                                            &lt;a href=\&#34;?sort=type&amp;sub_type=&#34;.$temp_type.&#34;\&#34;&gt;
                                                    &#34;.$temp_type.&#34;
                                            &lt;/a&gt;
                                        &lt;/td&gt;&#34;;
                                            $nastemp=$nasid;    
                                            $header_ports=&#39;&#39;;
                                            for($i=1;$i&lt;$n_of_ports+1;$i++){
                                                
                                                $header_ports.=&#34;&lt;td &#34;.$td_pre.&#34;  bgcolor=\&#34;#CCCCCC\&#34;&gt;&#34;.$i.&#34;&lt;/td&gt;&#34;;
                                            }
                                        
                                            echo &#34;  &lt;tr &#34;.$td_pre.&#34;&gt;$header_ports
            &lt;/tr&gt;
                                                
            
            &lt;tr&gt;
              &lt;td&gt;
                
              &lt;/td&gt;
                                                
              
              &lt;td&gt;
                
              &lt;/td&gt;
                                                
              
              &lt;td&gt;
                
              &lt;/td&gt; &#34;;
                                            for($i=1;$i&lt;$n_of_ports+1;$i++){
                                                if(strlen($ports[$i])&gt;0){
                                                echo &#34;
              
              &lt;td&gt;
                &#34;.$ports[$i].&#34;
              &lt;/td&gt;&#34;;
                                                        
                                                }
                                                else{
                                                    echo &#34;&lt;td bgcolor=\&#34;#FFFF00\&#34;&gt; &lt;/td&gt;&#34;;
                                                }
                                                
                                            }
                                            echo &#34;
            &lt;/tr&gt;&#34;;
                                            $ports=&#39;&#39;;
                                            $ports=array();
                                    }else{
                                        
                                        $temp_nas_ip=$row[&#39;nas_ip&#39;];
                                        $temp_name=$row[&#39;name&#39;];
                                        $temp_type=$row[&#39;type&#39;];
                                        $temp_id=$row[&#39;id&#39;];
                                        $temp_ports=$row[&#39;ports&#39;];
                                        $temp_version=$row[&#39;version&#39;];
                                        if(preg_match(&#34;/\bVersion/i&#34;,$row[&#39;version&#39;])){
                                                $temp_version=explode(&#34;Version&#34;,$row[&#39;version&#39;]);
                                                $row[&#39;version&#39;]=$temp_version[&#39;0&#39;];
                                                $temp_version=$row[&#39;version&#39;];
                                            }
                                    }
            
            
                                if(!(strlen($row[&#39;user&#39;])&gt;0))
                                        $row[&#39;user&#39;]=$row[&#39;mac&#39;];
                                if($row[&#39;deposit&#39;]&gt;=0){
                                    $ports[$row[&#39;port&#39;]].=&#34;&lt;a href=\&#34;http://admin/edit_user.php?uid=&#34;.$row[&#39;uid&#39;].&#34;\&#34; target=\&#34;_blank\&#34; &gt;&#34;.$row[&#39;user&#39;].&#34;&lt;/a&gt;
            
            &lt;br /&gt;&#34;;    
                                }else{
                                    $ports[$row[&#39;port&#39;]].=&#34;&lt;b&gt;&lt;a style=\&#34;color: red\&#34; href=\&#34;https://admin/edit_user.php?uid=&#34;.$row[&#39;uid&#39;].&#34;\&#34; target=\&#34;_blank\&#34;&gt;&#34;.$row[&#39;user&#39;].&#34;&lt;/a&gt;&lt;/b&gt;&lt;br /&gt;&#34;;   
                                }
                            }
                            if($_GET[&#39;id&#39;]&gt;1){
                                switch($_GET[&#39;snmp&#39;]){
                                case &#34;true&#34;:
                                    echo &#34;&lt;/tr&gt;
                                    &lt;/table&gt;&lt;/div&gt;&#34;;
                                    echo &#34;
            
            &lt;p&gt;
              &#34;.PAGE_MES_2.&#34;:
            &lt;/p&gt;
                                    
            
            &lt;p&gt;
              &#34;.PAGE_MES_3.&#34;:   $sw_res[type]
            &lt;/p&gt;
                                    
            
            &lt;p&gt;
              &#34;.PAGE_MES_4.&#34;    $sw_res[version]
            &lt;/p&gt;
                                    
            
            &lt;p&gt;
              &#34;.PAGE_MES_5.&#34;    $sw_res[ports]
            &lt;/p&gt;
                                    
            
            &lt;p&gt;
              Ip    $sw_res[ip]
            &lt;/p&gt;&#34;;
                                break;
                                default:
                                    echo &#34;&lt;/tr&gt;
                                    &lt;/table&gt;&lt;/div&gt;&#34;;
                                    echo &#34;
                                    
            
            &lt;p&gt;
              &lt;a href=\&#34;?sort=id&amp;id=&#34;.$temp_id.&#34;&amp;snmp=true\&#34;&gt;Get data by snmp&lt;/a&gt;
                                    
              
              &lt;p&gt;
                &#34;.PAGE_MES_2.&#34;:
              &lt;/p&gt;
                                    
              
              &lt;p&gt;
                &#34;.PAGE_MES_3.&#34;: $temp_type
              &lt;/p&gt;
                                    
              
              &lt;p&gt;
                &#34;.PAGE_MES_4.&#34;  
              &lt;/p&gt;
                                    
              
              &lt;p&gt;
                &#34;.PAGE_MES_5.&#34;  
              &lt;/p&gt;
                                    
              
              &lt;p&gt;
                Ip  $temp_nas_ip
              &lt;/p&gt;&#34;;
                                break;
                                }
                            }
                        }
                    
                    
                }
              }
              ?&gt;
              
              &lt;/pre&gt;
              

&lt;pre&gt;&lt;code&gt;          &amp;lt;p&amp;gt;
            pages/top.php:
          &amp;lt;/p&amp;gt;


          &amp;lt;pre lang=&amp;quot;php&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;?php ?&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;
  pages/bottom.php:
&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;
&lt;?php ?&gt;
&amp;lt;/html&gt;
&lt;/pre&gt;

&lt;p&gt;
  cron.php:
&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;
#!/usr/bin/php
&lt;?php
 include_once(&#34;engine.php&#34;);
  $db=new db_mysql(HOST,USER,DB_PASS,DB,DEBUG_DB);
 if(DEBUG_DB==&#34;true&#34;) echo &#39;$db obj is ok&#39;.&#34;&lt;br&gt;\n&#34;;
 
 $db-&gt;SET_NAMES(&#34;utf8&#34;);
 
 $db_nibs=new db_mysql(HOST_NIBS,USER_NIBS,DB_NIBS_PASS,DB_NIBS,DEBUG_DB);
 if(DEBUG_DB==&#34;true&#34;) echo &#39;$db_nibs obj is ok&#39;.&#34;

&lt;br /&gt;\n&#34;;
 //$db_nibs-&gt;SET_NAMES(&#34;cp1251&#34;);
 //$db-&gt;SET_COLLATE(&#34;latin1_swedish_ci&#34;);
 //$db_nibs-&gt;SET_COLLATE(&#34;cp1251_general_ci&#34;);
 $db_nibs-&gt;SET_NAMES(&#34;utf8&#34;);
 $page=new page(&amp;$db,&amp;$db_nibs);
 
 $page-&gt;cron();
 
?&gt;
&lt;/pre&gt;

&lt;p&gt;
  cron_one_ip.php:
&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;
#!/usr/bin/php -q
&lt;?php 
$path=&#34;/var/www/skmsw&#34;;
 $ip=$argv[&#39;1&#39;];
if(file_exists($path.&#34;/pid/&#34;.str_replace(&#34;.&#34;,&#34;&#34;,$ip))){
    echo &#34;exist&#34;;
}
else{
$f=fopen($path.&#34;/pid/&#34;.str_replace(&#34;.&#34;,&#34;&#34;,$ip),&#34;w&#34;); 
fwrite($f,&#34;do&#34;); 
include_once(&#34;engine.php&#34;);
  $db=new db_mysql(HOST,USER,DB_PASS,DB,DEBUG_DB);
 if(DEBUG_DB==&#34;true&#34;) echo &#39;$db obj is ok&#39;.&#34;&lt;br&gt;\n&#34;;
     $db-&gt;SET_NAMES(&#34;utf8&#34;);
 
 $db_nibs=new db_mysql(HOST_NIBS,USER_NIBS,DB_NIBS_PASS,DB_NIBS,DEBUG_DB);
 if(DEBUG_DB==&#34;true&#34;) echo &#39;$db_nibs obj is ok&#39;.&#34;

&lt;br /&gt;\n&#34;;
 //$db_nibs-&gt;SET_NAMES(&#34;cp1251&#34;);
 //$db-&gt;SET_COLLATE(&#34;latin1_swedish_ci&#34;);
 //$db_nibs-&gt;SET_COLLATE(&#34;cp1251_general_ci&#34;);
 $db_nibs-&gt;SET_NAMES(&#34;utf8&#34;);
 $page=new page(&amp;$db,&amp;$db_nibs);
 $page-&gt;cron_one_ip($ip);



unlink($path.&#34;/pid/&#34;.str_replace(&#34;.&#34;,&#34;&#34;,$ip)); 
}
 ?&gt;

&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Как заставить окончательно перейти абонентов на другой тип подключения?</title>
      <link>http://b-comm.ru/billing/%D0%BA%D0%B0%D0%BA-%D0%B7%D0%B0%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BE%D0%BA%D0%BE%D0%BD%D1%87%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE-%D0%BF%D0%B5%D1%80%D0%B5%D0%B9%D1%82%D0%B8-%D0%B0</link>
      <pubDate>Fri, 31 Dec 2010 09:50:02 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D0%BA%D0%B0%D0%BA-%D0%B7%D0%B0%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BE%D0%BA%D0%BE%D0%BD%D1%87%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE-%D0%BF%D0%B5%D1%80%D0%B5%D0%B9%D1%82%D0%B8-%D0%B0</guid>
      <description>&lt;p&gt;Я уже писал &lt;a href=&#34;http://b-comm.ru/?p=69&#34;&gt;про Скрипт для сервера доступа mpd5: up-script для информирования абонентов&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Но это не сработает на 100% и тем более сразу.&lt;/p&gt;

&lt;p&gt;**Почему?&lt;/p&gt;

&lt;p&gt;** Да потому, что люди включают компьютер подключают Интернет и через х-минут начинают пользоваться. &lt;strong&gt;Они просто не увидят сообщение&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Что делать?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Показывать данное сообщение каждые х-минут!&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;*/10    *   *   *   *   root /perevesti_vseh.php  2&gt;&amp;1&lt;/pre&gt;

&lt;p&gt;/perevesti_vseh.php&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;#!/usr/local/bin/php                                                                                                                                                               
&lt;?php
//наша таблица в фаерволе из прошлого поста)))
//http://b-comm.ru/?p=69 - тут
$table_ipfw_for_warn_up=7;
$link = mysql_connect(&#39;10.1.1.1&#39;, &#39;freenibs&#39;, &#39;freenibs&#39;);
               
if (!$link) {                                                                                                                                                                      
            die(&#39;Could not connect: &#39; . mysql_error());                                                                                                                            
}                                                                                                                                               mysql_select_db(&#34;freenibs&#34;);
$q=&#34;SELECT `ip`                                                                                                                                                                    
FROM `actions`                                                                                                                                                                     
WHERE `terminate_cause` = &#39;Online&#39;&#34;;                                                                                                                                               
                                                                                                                                                                                   
$result = mysql_query($q);                                                                                                                                                         
$num_rows = mysql_num_rows($result);                                                                                                                                               
if($num_rows&gt;0){                                                                                                                                                                   
                                                                                                                                                                                   
                                                                                                                                                                                   
                                                                                                                                                                                   
         while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {                                                                                                                  
                 $userip=$row[&#39;ip&#39;];                                                                                                                                               
                 //echo &#34;session: &#34;.$unique_id.&#34; will rise :)\n&#34;;                                                                                                                  
                $last_line = system(&#39;/sbin/ipfw table &#39;.$table_ipfw_for_warn_up.&#39; add &#39;.$userip.&#34;&#34;, $retval);                                                                                                                                                                                                                                                         
         }                                                                                                                                                                         
                                                                                                                                                                                   
}                                                                                                                                                                                  
sleep(60);                                                                                                                                                                         
                                                                                                                                                                                   
                                                                                                                                                                                   
 $last_line = system(&#39;/sbin/ipfw table 7 flush&#39;, $retval);                                                                                                                         
                                                                                                                                                                                   
?&gt;                                                         
&lt;/pre&gt;

&lt;p&gt;Вот так вот просто)))&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Скрипт для сервера доступа mpd5: up-script для информирования абонентов</title>
      <link>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B4%D0%BB%D1%8F-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%B0-mpd5-up-script-%D0%B4%D0%BB%D1%8F-%D0%B8%D0%BD%D1%84</link>
      <pubDate>Sun, 28 Nov 2010 11:19:09 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B4%D0%BB%D1%8F-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%B0-mpd5-up-script-%D0%B4%D0%BB%D1%8F-%D0%B8%D0%BD%D1%84</guid>
      <description>&lt;p&gt;Скрипт для сервера доступа mpd5: up-script для информирования абонентов.&lt;/p&gt;

&lt;p&gt;Этот скрипт Мне понадобился при переводе людей с PPPtP на PPPoE. Дело в том, что обзванивать ВСЕХ не всегда лучшая идея, а вот уведомить людей можно при подключении)))&lt;/p&gt;

&lt;p&gt;Скрипт до безобразия простой, Мы добавляем ИП-адрес клиента в таблицу фаервола&lt;/p&gt;

&lt;p&gt;/usr/local/etc/mpd5/up_warn.php &lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;#!/usr/loca/bin/php                          
&lt;?php                                                                                                                                         /*
* Скрипт для информирования абонентов при подключении к 
* серверу доступа
*/                                     
//$interface=$argv[&#39;1&#39;];                         
$table_ipfw_for_warn_up=7; // ЭТО таблица в фаерволе ipfw 
$fr_ip=$argv[&#39;4&#39;];                                                                                                                          $last_line = system(&#39;/sbin/ipfw table &#39;.$table_ipfw_for_warn_up.&#39; add &#39;.$fr_ip.&#34;&#34;, $retval);
                        
?&gt;                                                         
&lt;/pre&gt;

&lt;p&gt;Далее у Меня OS freeBSD ! Это будет работать на любой freebsd 5, freebsd 6, freebsd 7, freebsd 8, freebsd 9, freebsd 10 =)&lt;/p&gt;

&lt;p&gt;Вот простой скрипт. Всё что он делает &amp;#8212; это создаёт правило для редиректа всего трафика от подключившихся абонентов на страницу которая висит на этом же сервере. Надо обратить внимание, что ИП-адреса &amp;#171;у Меня&amp;#187; включают все диапазоны фейковых адресов + реальных &amp;#8212; то есть абоненто сможет спокойно сходить на страницу статистики, игровой сервер или еще что&amp;#8230;.&lt;/p&gt;

&lt;p&gt;/usr/local/etc/rc.d/ipfw.sh&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;#!/bin/sh
/sbin/ipfw delete 6
/sbin/ipfw table 6 flush                 
 #table 6 содержит ИП-адреса НАШЕГО адресного пространства, тут как минимум должен быть ВПН-сервер
/sbin/ipfw table 6 add 10.0.0.0/8;               
/sbin/ipfw table 6 add 192.168.0.0/16;    

#перенаправленние всего трафика абонента на траницу, котороя у нас висит на сервере: 
#server 127.0.0.1 port 9988

/sbin/ipfw add 6 fwd 127.0.0.1,9988 all from table\(7\) to not table\(6\);
                                                                        
&lt;/pre&gt;

&lt;p&gt;Теперь настраиваем тот самый сервер &amp;#8212; server 127.0.0.1 port 9988.&lt;/p&gt;

&lt;p&gt;Я использовал nginx &amp;#8212; что бы не грузить сервер)))&lt;/p&gt;

&lt;p&gt;/usr/local/etc/nginx/nginx.conf:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34; line=&#34;1&#34;&gt;server {                                                                                                                                                                        
        listen       9988;                                                                                                                                                         
      location / {                                                                                                                                                                 
           index index.php;                                                                                                                                                        
                root  /usr/local/www/perevod_info;                                                                                                                                 
                error_page  404 /index.php;                                                                                                                                        
                error_page 403 /index.php;                                                                                                                                         
                 if (!-e $request_filename) {                                                                                                                                      
                        rewrite ^(.*)$ /index.php last;                                                                                                                            
                }                                                                                                                                                                  
       }                                                                                                                                                                           
        location ~ \.php$ {                                                                                                                                                        
               fastcgi_pass    127.0.0.1:9000;                                                                                                                                     
                                                                                                                                                                                   
               fastcgi_index   index.php;                                                                                                                                          
         #      fastcgi_param     SCRIPT_FILENAME       /usr/local/www/forbid_inet/index.php;                                                                                      
                fastcgi_param     SCRIPT_FILENAME       /usr/local/www/perevod_info$fastcgi_script_name;                                                                           
             include      fastcgi_params;                                                                                                                                          
        }                                                                                                                                                                          
                                                                                                                                                                                   
        error_page  404 /index.php;                                                                                                                                                
        error_page   500 502 503 504  /index.php;                                                                                                                                  
        location = /50x.html {                                                                                                                                                     
            root   /usr/local/www/nginx-dist;                                                                                                                                      
        }                                                                                                                                                                          
}    
&lt;/pre&gt;

&lt;p&gt;index.php&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;&lt;?php include_once(&#34;index_.html&#34;); ?&gt;      
&lt;/pre&gt;

&lt;p&gt;index_.html&lt;/p&gt;

&lt;pre lang=&#34;html&#34; line=&#34;1&#34;&gt;                                                          
                                                                                                                                        
                                                                                                                                                                    
                                                                                                                                                                                   
                                                                                                                                                                             
                                                                                                                                                                                   


&lt;div class=&#34;container&#34;&gt;
  &lt;div class=&#34;header&#34;&gt;
    &lt;a href=&#34;http://www.isp.pl.ua&#34;&gt;home&lt;/a&gt;                                                                                                                     
        &lt;!-- end .header --&gt;
  &lt;/div&gt;                                                                                                                                                     
    
  
  &lt;div class=&#34;content&#34;&gt;
    &lt;h1 align=&#34;center&#34; style=&#34;color:#F00&#34;&gt;
      Внимание!!!
    &lt;/h1&gt;                                                                                                                         
        
    
    &lt;p align=&#34;center&#34; style=&#34;color:#F00&#34;&gt;
      &lt;em&gt;Прочитайте полность, что бы это сообщение больше не появлялось!!!&lt;/em&gt;
    &lt;/p&gt;                                                            
                                                                                                                                                                                       
        
    
    &lt;div&gt;
      Уважаемые клиент в связи с переходом на новый биллинг, произошли изменения. 
    &lt;/div&gt;                                               
                                                                                                                                  
        
    
    &lt;div&gt;
      &lt;br /&gt;                                                                                                                                                                   
          
    &lt;/div&gt;                                                                                                                                                                         
        
    
    &lt;div&gt;
      Так же со сменой серверов изменился и способ подключения, теперь доступ к Интернету предоставляется по протоколу PPPoE(Инструкция для &lt;a href=&#34;http://b-comm.ru:9988/pppoe_winxp.html&#34;&gt;Windows XP&lt;/a&gt; &lt;a href=&#34;http://b-comm.ru:9988/pppoe_win7.html&#34;&gt;Windows 7&lt;/a&gt;!!!).  
    &lt;/div&gt;                                                                        
        
    
    &lt;div&gt;
      &lt;p&gt;
        &lt;span class=&#34;gggggggg&#34;&gt;!!! Старые сервера будут отключены первого января 2011 года, уважительная просьба к этому времени создать новые подключения!!! &lt;/span&gt;&lt;!-- end .content --&gt;
      &lt;/p&gt;                  
            
      
      &lt;div&gt;
        
      &lt;/div&gt;                                                                                                                                                                       
            
      
      &lt;div&gt;
        
      &lt;/div&gt;                                                                                                                                                                 
               
      
      &lt;p align=&#34;center&#34; style=&#34;color:#F00; font-style: italic;&#34;&gt;
        (!!!это сообщение пропадёт только через 10 минут!!!
      &lt;/p&gt;                                                                                                                                                                 
            
      
      &lt;p&gt;
        &amp;nbsp;
      &lt;/p&gt;                                                                                                                                                                
          
    &lt;/div&gt;                                                                                                                                                                         
    
  &lt;/div&gt;                                                                                                                                                                             
    
  
  &lt;div class=&#34;footer&#34;&gt;
    &lt;p&gt;
      К Вам обращается Администрация сети &#34;home&#34;
    &lt;/p&gt;                                                                                                                 
      
    
    &lt;!-- end .footer --&gt;
  &lt;/div&gt;                                                                                                                                                       
    
  
  &lt;!-- end .container --&gt;
&lt;/div&gt;                                                                                                                                                    
                                                                                                                                                                            
  
&lt;/pre&gt;

&lt;p&gt;И самое последнее &amp;#8212; если Вам всё же нужно что бы пользователи работали в Интернете делайте так:&lt;/p&gt;

&lt;p&gt;/etc/crontab&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;*/10    *       *       *       *       root /sbin/ipfw table 7 flush  2&gt;&amp;1                                                                                                        
&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Скрипт для логгирования мак-адресов пользователей</title>
      <link>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B4%D0%BB%D1%8F-%D0%BB%D0%BE%D0%B3%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B0%D0%BA-%D0%B0%D0%B4%D1%80%D0%B5%D1%81%D0%BE%D0%B2-%D0%BF</link>
      <pubDate>Tue, 15 Dec 2009 00:23:33 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B4%D0%BB%D1%8F-%D0%BB%D0%BE%D0%B3%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B0%D0%BA-%D0%B0%D0%B4%D1%80%D0%B5%D1%81%D0%BE%D0%B2-%D0%BF</guid>
      <description>&lt;p&gt;Данный скрипт и его копии на серверах доступа и роутерах стоят, что бы сливать инфу о мак-адресах в базу&amp;#8230;&lt;/p&gt;

&lt;p&gt;Эти данные потом используется другими скриптами. Отсюда видно кто куда и зачем )))&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cat /etc/crontab|grep arp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre lang=&#34;bash&#34;&gt;*/10    *       *       *       *       root /arpwatch.sh  &gt; /dev/null
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;cat /arpwatch.sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre lang=&#34;bash&#34; line=&#34;1&#34;&gt;#!/usr/local/bin/bash
#для моих реальников - начинаются с 91.203., но это не правильно)))
#тут надо было использовать egrep
#в общем не пишите так скрипты))) 
#@www.isp.pl.ua
############

arp -a -n | tr &#39;(&#39; &#39; &#39; | tr &#39;)&#39; &#39; &#39; | awk &#39;{print$2&#34;K&#34;$4&#34;L&#34;}&#39; | grep 10. | grep -v &#34;incomplet&#34; | grep -v &#34;ff:ff&#34;|grep -v &#34;91.203.&#34;&gt;/arpwatch.table

arp -a -n | tr &#39;(&#39; &#39; &#39; | tr &#39;)&#39; &#39; &#39; | awk &#39;{print$2,$4}&#39; | grep 10. | grep -v &#34;incomplet&#34; | grep -v &#34;ff:ff&#34;|grep -v &#34;91.203.&#34;&gt;/arpwatch.table

arp -a -n | tr &#39;(&#39; &#39; &#39; | tr &#39;)&#39; &#39; &#39; | awk &#39;{print$2,$4}&#39; | grep 10. | grep -v &#34;incomplet&#34; | grep -v &#34;ff:ff&#34;|grep -v &#34;91.203.&#34;&gt;/arpwatch.table
arp -a -n | tr &#39;(&#39; &#39; &#39; | tr &#39;)&#39; &#39; &#39; | awk &#39;{print$2,$4}&#39; | grep &#34;172.168&#34; | grep -v &#34;incomplet&#34; | grep -v &#34;ff:ff&#34;&gt;&gt;/arpwatch.table
arp -a -n | tr &#39;(&#39; &#39; &#39; | tr &#39;)&#39; &#39; &#39; | awk &#39;{print$2,$4}&#39; | grep &#34;91.&#34; | grep -v &#34;incomplet&#34; | grep -v &#34;ff:ff&#34;&gt;&gt;/arpwatch.table

/arpwatch.php
&lt;/pre&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;#!/usr/local/bin/php
&lt;?php
include_once(&#34;/engine.php&#34;);
$a=new db_mysql();
$a-&gt;init(&#34;10.1.1.1&#34;,&#34;arpwatch&#34;,&#34;arpwatch&#34;,&#34;freenibs&#34;);
$f=&#34;/arpwatch.table&#34;;

$f_array=file($f);
$n=count($f_array);
for ($i=1; $i&amp;lt;$n;$i++)
{
            $str=explode(&#34; &#34;,$f_array[$i]);
$q=&#34;INSERT INTO `arpwatch` (`ip`,`arp`) VALUES (&#39;&#34;.quote_smart(trim($str[0])).&#34;&#39;,&#39;&#34;.quote_smart(trim($str[1])) .&#34;&#39;) ON DUPLICATE KEY UPDATE `ip`=&#39;&#34;.quote_smart(trim($str[0])).&#34;&#39;,`date`=NOW()&#34;;
//          echo $q.&#34;\n&#34;;
            $a-&gt;query($q);
}

$a-&gt;close_db();
?&gt;
&lt;/pre&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;&lt;?php
function quote_smart($value)
{

    if (get_magic_quotes_gpc()) {
        $value = stripslashes($value);
    }

    if (!is_numeric($value)) {
        $value = mysql_real_escape_string($value);
    }
    return $value;
}



class db_mysql{
    public $query;
    public $host;
    public $user;
    public $passw;
    public $db;
    public $link;
    public $res;
    public $temp_q;
    public $num;
    public $ar;
        public function  __construct ()
        {
                $this-&gt;query=NULL;
                $this-&gt;ar=array();
        }

        function __destruct()
        {
                @mysql_close($this-&gt;link);
        }

        public function  init($HOST,$USER,$PASSW,$DB)
        {
                self::set_host($HOST);
                self::set_user($USER);
                self::set_passw($PASSW);
                self::set_db($DB);
                $this-&gt;query=NULL;
                $this-&gt;ar=array();
                $this-&gt;link=@mysql_connect($this-&gt;host,$this-&gt;user, $this-&gt;passw)or die(ERR1);
                mysql_select_db($this-&gt;db,$this-&gt;link) or die(ERR2);
                //$q=&#34;SET NAMES utf8&#34;;
                self::query($q);
        }

        function connect(){
                $this-&gt;query=NULL;
                $this-&gt;ar=array();
                $this-&gt;link=@mysql_connect($this-&gt;host,$this-&gt;user, $this-&gt;passw)or die(ERR1);
                mysql_select_db($this-&gt;db,$this-&gt;link) or die(ERR2);
        }

        public function set_host($host){$this-&gt;host=$host;}
        public function set_user($user){$this-&gt;user=$user;}
        public function set_passw($passw){$this-&gt;passw=$passw;}
        public function set_db($db){$this-&gt;db=$db;}

        public function  query($q){
                $this-&gt;query=mysql_db_query($this-&gt;db,$q,$this-&gt;link);//or die(ERR3);
        }
        public function num_rows(){
                $this-&gt;num=mysql_num_rows($this-&gt;query);
                return $this-&gt;num;
        }
        public function  fetch_row(){
                $this-&gt;res=mysql_fetch_row($this-&gt;query);
                return $this-&gt;res;
        }
        public function  fetch_array(){
                $this-&gt;res=mysql_fetch_array($this-&gt;query); //or die(mysql_error());
                return $this-&gt;res;
        }

        public function db_select()
        {
                mysql_select_db($this-&gt;db,$this-&gt;link) or die(ERR2);
        }
        public function free_result()
        {
                mysql_free_result($this-&gt;res);
        }

        public function close_db()
        {
                mysql_close($this-&gt;link);
        }

}


?&gt;

&lt;/pre&gt;

&lt;p&gt;dump:&lt;/p&gt;

&lt;pre lang=&#34;sql&#34; line=&#34;1&#34;&gt;-- phpMyAdmin SQL Dump
-- version 3.1.2
-- http://www.phpmyadmin.net
--

SET SQL_MODE=&#34;NO_AUTO_VALUE_ON_ZERO&#34;;

--
-- База данных: `freenibs`
--

-- --------------------------------------------------------

--
-- Структура таблицы `arpwatch`
--

DROP TABLE IF EXISTS `arpwatch`;
CREATE TABLE IF NOT EXISTS `arpwatch` (
  `id` int(255) NOT NULL auto_increment,
  `ip` varchar(255) NOT NULL,
  `arp` varchar(255) NOT NULL,
  `date` timestamp NOT NULL default &#39;0000-00-00 00:00:00&#39; on update CURRENT_TIMESTAMP,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `ip` (`ip`,`arp`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4648 ;

--
-- Дамп данных таблицы `arpwatch`
--

INSERT INTO `arpwatch` (`id`, `ip`, `arp`, `date`) VALUES(4, &#39;10.1.5.1&#39;, &#39;00:02:b3:1e:01:e1&#39;, &#39;2009-12-24 02:27:14&#39;);
&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Скрипты бекапа баз данных mysql</title>
      <link>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%B1%D0%B5%D0%BA%D0%B0%D0%BF%D0%B0-%D0%B1%D0%B0%D0%B7-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-mysql</link>
      <pubDate>Sat, 21 Nov 2009 09:35:40 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%B1%D0%B5%D0%BA%D0%B0%D0%BF%D0%B0-%D0%B1%D0%B0%D0%B7-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-mysql</guid>
      <description>&lt;p&gt;В нашей жизни возникает потребность бекапить данные и обычно в самый не подходящий момент эти данные, которые &amp;#171;так сильно нужны&amp;#187; &amp;#8212; отсутствуют.&lt;/p&gt;

&lt;p&gt;Скрипт бекапит только заданые базы данных (то есть, если забыли добавить свои базы данных &amp;#8212; сами виноваты((( )&lt;/p&gt;

&lt;pre lang=&#34;shell&#34; line=&#34;1&#34;&gt;45      20      */2     *       *       root    /bin/mysql_back.sh &gt;/dev/null
&lt;/pre&gt;

&lt;p&gt;/bin/mysql_back.sh&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre lang=&#34;bash&#34; line=&#34;1&#34;&gt;#!/bin/sh
dump=/usr/local/bin/mysqldump
password=&#34;root_password&#34;
opt=&#34;--quote-names --add-drop-table --opt  -x  -F --add-drop-table  --all-databases -p$password&#34;
#--compatible=mysql40


path_to_save_db=/home/backup/mysql
buckup_name=alldb

//базы для сохранения
db_backup=&#34;freenibs radius mysql&#34;
name_of_same_db=`echo $db_backup|tr &#39; &#39; &#39;_&#39;`
opt_not_all_db=&#34;--quote-names --add-drop-table --opt  -x  -F -B $db_backup -p$password &#34;
# --compatible=mysql40
FN=`/bin/date +%d.%m.%Y-%H-%M-%S`

#rm $path_to_save_db/*
$dump $opt  &gt;$path_to_save_db/$buckup_name.sql

place=&#34;$FN&#34;
mkdir -p $path_to_save_db/$place
for b in $db_backup;do
opt_not_all_db=&#34;--quote-names --add-drop-table --opt  -x  -F -B $b -p$password&#34;
$dump $opt_not_all_db  &gt;$path_to_save_db/$place/$b.sql

done
cd $path_to_save_db

nice -19 tar -cvf $path_to_save_db/all-$FN.tar $buckup_name.sql &gt;/dev/null

nice -19 tar -cvf $path_to_save_db/$place.tar $place  &gt;/dev/null


nice -19 bzip2 $place.tar
nice -19 bzip2 all-$FN.tar

rm $path_to_save_db/$buckup_name.sql
rm -rf $path_to_save_db/$place
&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Скрипт /usr/local/etc/mpd5/link-up для mpd5 срабатывающий при подключении</title>
      <link>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-usrlocaletcmpd5link-up-%D0%B4%D0%BB%D1%8F-mpd5-%D1%81%D1%80%D0%B0%D0%B1%D0%B0%D1%82%D1%8B%D0%B2%D0%B0%D1%8E%D1%89%D0%B8%D0%B9-%D0%BF%D1%80%D0%B8-%D0%BF%D0%BE</link>
      <pubDate>Sat, 12 Sep 2009 23:32:22 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-usrlocaletcmpd5link-up-%D0%B4%D0%BB%D1%8F-mpd5-%D1%81%D1%80%D0%B0%D0%B1%D0%B0%D1%82%D1%8B%D0%B2%D0%B0%D1%8E%D1%89%D0%B8%D0%B9-%D0%BF%D1%80%D0%B8-%D0%BF%D0%BE</guid>
      <description>&lt;p&gt;Скрипт /usr/local/etc/mpd5/link-up для mpd5 срабатывающий при подключении.&lt;/p&gt;

&lt;p&gt;При подключении:&lt;/p&gt;

&lt;p&gt;Первым SELECT&amp;#8217;ом из базы Мы смотрим &amp;#8212; Натить ли пользователя? То есть если emty или 0 пользователей &amp;#8212; не натим.&lt;/p&gt;

&lt;p&gt;Вторым SELECT&amp;#8217;ом из базы Мы смотрим &amp;#8212; Надо ли менять скорость пользователя, если надо &amp;#8212; меняем. У меня это сделано на ipfw pipe, но думаю перейти на ng_car:)))&lt;/p&gt;

&lt;p&gt;Третим SELECT&amp;#8217;ом из базы Мы &amp;#8212; добавляем запись в базу данных, что пользователь подключился.&lt;/p&gt;

&lt;p&gt;С помощью данного скрипта Я решал следующую проблему:&lt;/p&gt;

&lt;p&gt;Быстродействие &amp;#8212; на php тормозило. Хотя может и руки из жо)))&lt;/p&gt;

&lt;p&gt;Подключается скрипт в /usr/local/etc/mpd5/mpd.conf так вот, в секцию с вашим сервером (pptp/pppoe/etc)&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;set iface up-script /usr/local/etc/mpd5/
&lt;/pre&gt;

&lt;p&gt;Обязательно примите к сведению, что запрос&lt;/p&gt;

&lt;pre lang=&#34;sql&#34; line=&#34;1&#34;&gt;SELECT * FROM `all` WHERE `ip` not LIKE &#39;91.%&#39; 
&lt;/pre&gt;

&lt;p&gt;а именно его часть: `ip` not LIKE &amp;#8217;91.%&amp;#8217; добавлен, что бы НАТ не включался для реальных IP-адресов.&lt;/p&gt;

&lt;p&gt;У Вас могут быть другие адреса )))&lt;/p&gt;

&lt;p&gt;main.cpp :&lt;/p&gt;

&lt;pre lang=&#34;cpp&#34; line=&#34;1&#34;&gt;#include &amp;lt;QtCore&gt;
#include &amp;lt;QCoreApplication&gt;
#include &amp;lt;QtSql&gt;
#include &amp;lt;iostream&gt;
#include &amp;lt;cstdlib&gt;
#include &amp;lt;iomanip&gt;
#include &amp;lt;stdio.h&gt;
#include &amp;lt;stdlib.h&gt;
#include &amp;lt;string.h&gt;
#include &amp;lt;time.h&gt;
using namespace std;


#define SQLDRIVER &#34;QMYSQL&#34;
#define HOST &#34;10.1.1.1&#34;
#define DBNAME &#34;bezlim&#34;
#define USER &#34;bezlim&#34;
#define PASSWORD &#34;bezlim&#34;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QTextCodec *codec = QTextCodec::codecForName(&#34;CP1251&#34;);
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForCStrings(codec);

    QSqlDatabase db = QSqlDatabase::addDatabase(SQLDRIVER);

    if( !db.isDriverAvailable(SQLDRIVER))
    {

    }


    db.setHostName(HOST);
    db.setDatabaseName(DBNAME);
    db.setUserName(USER);
    db.setPassword(PASSWORD);
    //db.setPort(3306);
    bool ok=db.open();
    if(ok!=true){
        std::cout&amp;lt;&amp;lt;&#34;unable connec&#39;t&#34;;
        exit(1);
    }
     QString exec_this;
     int bw1;

     QString ip_argv;
     ip_argv=argv[4];

     //qDebug()&amp;lt;&amp;lt;ip_argv;

     QSqlQuery query(&#34;SELECT * FROM `all` WHERE `ip` not LIKE &#39;91.%&#39; AND `activ`=&#39;y&#39; AND `ip`=&#39;&#34;+ip_argv+&#34;&#39; LIMIT 1&#34;);
     while (query.next()) {
         QString id = query.value(5).toString();

         QString ip = query.value(0).toString();
         QString in = query.value(3).toString();
         QString out = query.value(4).toString();
         QString n = query.value(1).toString();
         bw1 =query.value(3).toInt();
         QString bw2 =query.value(3).toString();
//pfctl - это закомментированная часть для pf nat
//      exec_this=&#34;/sbin/pfctl -tinat -Tadd &#34;;
//      exec_this +=ip;
//      qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

        exec_this =&#34;/sbin/ipfw table 1 add &#34;;
        exec_this +=ip;

        system(exec_this.toStdString().c_str());


    }
        qDebug()&amp;lt;&amp;lt;ip_argv&amp;lt;&amp;lt;endl;

        qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

     QSqlQuery query11(&#34;SELECT * FROM `all` WHERE `activ`=&#39;y&#39; AND `ip`=&#39;&#34;+ip_argv+&#34;&#39; LIMIT 1&#34;);
     while (query11.next()) {
//pfctl это закомментированная часть для pf nat
//      exec_this=&#34;/sbin/pfctl -tinat -Tadd &#34;;
//      exec_this +=ip;
//      qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

         QString id = query11.value(5).toString();

         QString ip = query11.value(0).toString();
         QString in = query11.value(3).toString();
         QString out = query11.value(4).toString();
         QString n = query11.value(1).toString();
         bw1 =query11.value(3).toInt();
         QString bw2 =query11.value(3).toString();


      //Эта часть у Меня отвечает за выделение скорости. Я использовал ipfw pipe
        if(bw1&gt;0)
        {
            qint64 num = 0;
            QString num1;
            query.clear();
             QSqlQuery query(&#34;SELECT * FROM `freenibs`.`pipes` WHERE `freenibs`.`pipes`.`bw`=&#39;&#34;+bw2+&#34;&#39; LIMIT 1&#34;);
            //qDebug()&amp;lt;&amp;lt;&#34;SELECT `freenibs`.`pipes`.`n` FROM `freenibs`.`pipes` WHERE `freenibs`.`pipes`.`bw`=&#39;&#34;+bw2+&#34;&#39; LIMIT 1&#34;&amp;lt;&amp;lt;endl;
             while (query.next()) {
                    num = query.value(1).toInt();
                    num1 = query.value(1).toString();
                }
            query.clear();
            if(num&gt;0)
            {
                    //qDebug()&amp;lt;&amp;lt;&#34;NUM&gt;0|&#34;&amp;lt;&amp;lt;num1&amp;lt;&amp;lt;&#34;|&#34;&amp;lt;&amp;lt;endl;
                    exec_this =&#34;/sbin/ipfw pipe &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; config mask dst-ip 0x000000ff bw &#34;;
                    exec_this +=bw2;
                    exec_this +=&#34;Kbit/s&#34;;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;
                    exec_this =&#34;/sbin/ipfw table &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; add &#34;;
                    exec_this +=ip;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;
            }
            else
            {
                    QSqlQuery query1(&#34; SELECT MAX(`n`)+1  FROM `freenibs`.`pipes` &#34;);
                    //qDebug()&amp;lt;&amp;lt;num&amp;lt;&amp;lt;endl;
                    // qDebug()&amp;lt;&amp;lt;query1.lastError()&amp;lt;&amp;lt;endl;
                    // query.exec();
                     //qDebug()&amp;lt;&amp;lt;query1.lastError()&amp;lt;&amp;lt;endl;
                     while (query1.next()) {
                            //num = query1.value(0).toInt();
                            num1 = query1.value(0).toString();
                        }
                    //qDebug()&amp;lt;&amp;lt;&#34;NUM:&#34;&amp;lt;&amp;lt;num1&amp;lt;&amp;lt;endl;
                     //QSqlQuery
                     query.prepare(&#34;INSERT INTO `freenibs`.`pipes`  ( `bw`,`n`) values( &#39;&#34; +bw2+ &#34;&#39;,&#39;&#34;+num1+&#34;&#39;)&#34;);
                    // qDebug()&amp;lt;&amp;lt;query.lastError()&amp;lt;&amp;lt;endl;
                     query.exec();

                    exec_this =&#34;/sbin/ipfw delete &#34;;
                    exec_this +=num1;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

                    exec_this =&#34;/sbin/ipfw pipe &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; config mask dst-ip 0x000000ff bw &#34;;
                    exec_this +=bw2;
                    exec_this +=&#34;Kbit/s&#34;;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

                    exec_this =&#34;/sbin/ipfw -q add &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; pipe &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; all from table\\(&#34;;
                    exec_this +=num1;
                    exec_this +=&#34;\\) to not 10.0.0.0/8 out&#34;;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;


                    exec_this =&#34;/sbin/ipfw -q add &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; pipe &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; all from not 10.0.0.0/8 to table\\(&#34;;
                    exec_this +=num1;
                    exec_this +=&#34;\\) in &#34;;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;


                    exec_this =&#34;/sbin/ipfw table &#34;;
                    exec_this +=num1;
                    exec_this += &#34; add &#34;;
                    exec_this +=ip;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;
            }
        }

       //здесь Мы заполняем таблицу для того, что бы видеть что пользователь подключился
        QSqlQuery query(&#34;INSERT INTO `freenibs`.`updown` (`ip` ,`time` ,`status`) VALUES ( &#39;&#34;+ip_argv+&#34;&#39;,CURRENT_TIMESTAMP , &#39;up&#39;);&#34;);
        query.clear();
    }
     db.close();
//    return a.exec();
}
&lt;/pre&gt;

&lt;p&gt;Makefile&lt;/p&gt;

&lt;pre lang=&#34;make&#34; line=&#34;1&#34;&gt;#############################################################################
# Makefile for building: link-up
# Generated by qmake (2.01a) (Qt 4.4.3) on: Thu Jul 23 00:40:54 2009
# Project:  pro.pro
# Template: app
# Command: /usr/local/bin/qmake-qt4 -unix -o Makefile pro.pro
#############################################################################

####### Compiler, tools and options

CC            = cc
CXX           = c++
DEFINES       = -DQT_NO_DEBUG -DQT_SQL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
INCPATH       = -I/usr/local/share/qt4/mkspecs/freebsd-g++ -I. -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4 -I. -I. -I/usr/local/include
LINK          = c++
LFLAGS        = -pthread -Wl,-rpath,/usr/local/lib/qt4
LIBS          = $(SUBLIBS)  -L/usr/local/lib -L/usr/local/lib/qt4 -lQtSql -L/usr/local/lib/qt4 -L/usr/local/lib -pthread -pthread -lQtGui -pthread -lpng -lSM -lICE -pthread -pthread -lXi -lXrender -lXrandr -lfreetype -lfontconfig -lXext -lX11 -lQtCore -lz -lm -pthread -lgthread-2.0 -lglib-2.0 -liconv
AR            = ar cqs
RANLIB        =
QMAKE         = /usr/local/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -R
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = $(COPY_FILE)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp
OBJECTS       = main.o
DIST          = /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                pro.pro
QMAKE_TARGET  = link-up
DESTDIR       =
TARGET        = link-up

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cc.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cxx.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.C.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.c.o:
        $(CC) -c $(CFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)
        $(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: pro.pro  /usr/local/share/qt4/mkspecs/freebsd-g++/qmake.conf /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                /usr/local/lib/qt4/libQtSql.prl \
                /usr/local/lib/qt4/libQtCore.prl \
                /usr/local/lib/qt4/libQtGui.prl
        $(QMAKE) -unix -o Makefile pro.pro
/usr/local/share/qt4/mkspecs/common/unix.conf:
/usr/local/share/qt4/mkspecs/qconfig.pri:
/usr/local/share/qt4/mkspecs/features/qt_functions.prf:
/usr/local/share/qt4/mkspecs/features/qt_config.prf:
/usr/local/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/local/share/qt4/mkspecs/features/default_pre.prf:
/usr/local/share/qt4/mkspecs/features/release.prf:
/usr/local/share/qt4/mkspecs/features/default_post.prf:
/usr/local/share/qt4/mkspecs/features/unix/thread.prf:
/usr/local/share/qt4/mkspecs/features/warn_on.prf:
/usr/local/share/qt4/mkspecs/features/qt.prf:
/usr/local/share/qt4/mkspecs/features/moc.prf:
/usr/local/share/qt4/mkspecs/features/resources.prf:
/usr/local/share/qt4/mkspecs/features/uic.prf:
/usr/local/share/qt4/mkspecs/features/yacc.prf:
/usr/local/share/qt4/mkspecs/features/lex.prf:
/usr/local/lib/qt4/libQtSql.prl:
/usr/local/lib/qt4/libQtCore.prl:
/usr/local/lib/qt4/libQtGui.prl:
qmake:  FORCE
        @$(QMAKE) -unix -o Makefile pro.pro

dist:
        @$(CHK_DIR_EXISTS) .tmp/link-up1.0.0 || $(MKDIR) .tmp/link-up1.0.0
        $(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/link-up1.0.0/ &amp;#038;&amp;#038; $(COPY_FILE) --parents main.cpp .tmp/link-up1.0.0/ &amp;#038;&amp;#038; (cd `dirname .tmp/link-up1.0.0` &amp;#038;&amp;#038; $(TAR) link-up1.0.0.tar link-up1.0.0 &amp;#038;&amp;#038; $(COMPRESS) link-up1.0.0.tar) &amp;#038;&amp;#038; $(MOVE) `dirname .tmp/link-up1.0.0`/link-up1.0.0.tar.gz . &amp;#038;&amp;#038; $(DEL_FILE) -r .tmp/link-up1.0.0


clean:compiler_clean
        -$(DEL_FILE) $(OBJECTS)
        -$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
        -$(DEL_FILE) $(TARGET)
        -$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
        -$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean:

####### Compile

main.o: main.cpp
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:


&lt;/pre&gt;

&lt;p&gt;дамп базы:&lt;/p&gt;

&lt;pre lang=&#34;cpp&#34; line=&#34;1&#34;&gt;-- phpMyAdmin SQL Dump
-- version 3.1.2
-- http://www.phpmyadmin.net
--
SET SQL_MODE=&#34;NO_AUTO_VALUE_ON_ZERO&#34;;

--
-- База данных: `bezlim`
--

-- --------------------------------------------------------

--
-- Структура таблицы `all`
--

DROP TABLE IF EXISTS `all`;
CREATE TABLE IF NOT EXISTS `all` (
  `ip` varchar(48) NOT NULL default &#39;192.168.0.1&#39;,
  `rule` int(32) NOT NULL default &#39;500&#39;,
  `bw1` varchar(12) NOT NULL default &#39;0&#39;,
  `bw2` varchar(12) NOT NULL default &#39;0&#39;,
  `activ` char(1) NOT NULL default &#39;y&#39;,
  `id` int(32) NOT NULL auto_increment,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `ip` (`ip`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3326 ;



--
-- База данных: `freenibs`
--

-- --------------------------------------------------------

-- --------------------------------------------------------

--
-- Структура таблицы `pipes`
--

DROP TABLE IF EXISTS `pipes`;
CREATE TABLE IF NOT EXISTS `pipes` (
  `id` int(255) NOT NULL auto_increment,
  `n` int(255) NOT NULL default &#39;11&#39;,
  `bw` int(255) default &#39;0&#39;,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `bw` (`bw`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=63 ;

--
-- Дамп данных таблицы `pipes`
--

--
-- Структура таблицы `updown`
--

DROP TABLE IF EXISTS `updown`;
CREATE TABLE IF NOT EXISTS `updown` (
  `id` bigint(255) NOT NULL auto_increment,
  `ip` varchar(100) NOT NULL default &#39;0.0.0.0&#39;,
  `time` timestamp NOT NULL default CURRENT_TIMESTAMP,
  `status` enum(&#39;up&#39;,&#39;down&#39;) NOT NULL,
  PRIMARY KEY  (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1758553 ;

--
-- Триггеры `updown`
--
DROP TRIGGER IF EXISTS `freenibs`.`inserttest`;
DELIMITER //
CREATE TRIGGER `freenibs`.`inserttest` BEFORE INSERT ON `freenibs`.`updown`
 FOR EACH ROW BEGIN
UPDATE `users` SET `users`.`up_n`=`users`.`up_n`+1 WHERE `users`.`framed_ip`=NEW.ip;
END
//
DELIMITER ;



&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Автоматическое формирование ipfw pipe для правильного link-up</title>
      <link>http://b-comm.ru/billing/%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-ipfw-pipe-%D0%B4%D0%BB%D1%8F-%D0%BF%D1%80</link>
      <pubDate>Fri, 11 Sep 2009 23:01:59 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-ipfw-pipe-%D0%B4%D0%BB%D1%8F-%D0%BF%D1%80</guid>
      <description>&lt;p&gt;Что делает этот скрипт?&lt;/p&gt;

&lt;p&gt;Допустим у Нас есть сервер и пользователи с фейковыми адресами. Мы используем скрипт &lt;a href=&#34;http://isp.pl.ua/?p=13&#34;&gt;link-up&lt;/a&gt; при подключении пользователя. Юзер отлично подключился, пользуется Интернетом &amp;#8212; отключился. Но у нас некая ошибка или изменение &amp;#8212; Мы другому пользователю выдаём этот же ИП-к. Тогда у Нас могут возникнуть проблемы с тем, что скорость не правильно регулируется.&lt;/p&gt;

&lt;p&gt;Этот скрипт раз в х-минут по крону или вашему желанию восстанавливает справедливое положение вещей)))&lt;/p&gt;

&lt;p&gt;Можно так же добавить сюда очистку для тех, кто не в онлайне)))&lt;/p&gt;

&lt;p&gt;Так же Он создаёт правильные pip&amp;#8217;ы, которых не было &amp;#8212; избавляя Вас от надобности apache&amp;#8217;у давать sudo, как это сделано в freeNIBS.&lt;/p&gt;

&lt;p&gt;но будьте осторожны Я встречал сообщения о том, что если выполнять очень быстро (у Меня 2000 раз например) команды ipfw могут быть траблы.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;main.cpp:&lt;/p&gt;

&lt;pre lang=&#34;cpp&#34; line=&#34;1&#34;&gt;#include &amp;lt;QtCore&gt;
#include &amp;lt;QCoreApplication&gt;
#include &amp;lt;QtSql&gt;
#include &amp;lt;iostream&gt;
#include &amp;lt;cstdlib&gt;
#include &amp;lt;iomanip&gt;
#include &amp;lt;stdio.h&gt;
#include &amp;lt;stdlib.h&gt;
#include &amp;lt;string.h&gt;
#include &amp;lt;time.h&gt;
using namespace std;


#define SQLDRIVER &#34;QMYSQL&#34;
#define HOST &#34;10.1.1.1&#34;
#define DBNAME &#34;bezlim&#34;
#define USER &#34;bezlim&#34;
#define PASSWORD &#34;bezlim&#34;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QTextCodec *codec = QTextCodec::codecForName(&#34;CP1251&#34;);
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForCStrings(codec);

    QSqlDatabase db = QSqlDatabase::addDatabase(SQLDRIVER);

    if( !db.isDriverAvailable(SQLDRIVER))
    {

    }


    db.setHostName(HOST);
    db.setDatabaseName(DBNAME);
    db.setUserName(USER);
    db.setPassword(PASSWORD);
    //db.setPort(3306);
    bool ok=db.open();
    if(ok!=true){
        std::cout&amp;lt;&amp;lt;&#34;unable connec&#39;t&#34;;
        exit(1);
    }
     QString exec_this;
//     int bw1;

     QString ip_argv;
     ip_argv=argv[4];

     //qDebug()&amp;lt;&amp;lt;ip_argv;

            qint64 num = 0;
            QString num1;

        QSqlQuery query(&#34;SELECT * FROM `freenibs`.`pipes` &#34;);
        while (query.next())
        {
                    num = query.value(1).toInt();
                    num1 = query.value(1).toString();
                    QString bw2 = query.value(2).toString();
            //query.clear();
                if(num&gt;0){
                    exec_this =&#34;/sbin/ipfw table &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; flush &#34;;
                    system(exec_this.toStdString().c_str());

                    //qDebug()&amp;lt;&amp;lt;&#34;NUM&gt;0|&#34;&amp;lt;&amp;lt;num1&amp;lt;&amp;lt;&#34;|&#34;&amp;lt;&amp;lt;endl;
                    exec_this =&#34;/sbin/ipfw pipe &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; config mask dst-ip 0x000000ff bw &#34;;
                    //exec_this +=&#34; config mask dst-ip 0xffffffff bw &#34;;

                    exec_this +=bw2;
                    exec_this +=&#34;Kbit/s&#34;;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

                    exec_this =&#34;/sbin/ipfw pipe 10&#34;;
                    exec_this +=num1;
                    exec_this +=&#34; config mask src-ip 0x000000ff bw &#34;;
                    //exec_this +=&#34; config mask src-ip 0xffffffff bw &#34;;

                    exec_this +=bw2;
                    exec_this +=&#34;Kbit/s&#34;;
                    system(exec_this.toStdString().c_str());


                    exec_this =&#34;/sbin/ipfw delete &#34;;
                    exec_this +=num1;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

                    exec_this =&#34;/sbin/ipfw delete 10&#34;;
                    exec_this +=num1;
                    system(exec_this.toStdString().c_str());


                    exec_this =&#34;/sbin/ipfw -q add &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; pipe &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; all from not 10.0.0.0/8 to table\\(&#34;;
                    exec_this +=num1;
                    exec_this +=&#34;\\) in &#34;;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

                    exec_this =&#34;/sbin/ipfw -q add &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; pipe 10&#34;;
                    exec_this +=num1;
                    exec_this +=&#34; all from table\\(&#34;;
                    exec_this +=num1;
                    exec_this +=&#34;\\) to not 10.0.0.0/8 out&#34;;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

                }
            }



             QSqlQuery query1(&#34;SELECT `freenibs`.`pipes`.`n` ,`bezlim`.`all`.`ip` FROM `bezlim`.`all` LEFT JOIN   `freenibs`.`users` ON (`freenibs`.`users`.`framed_ip`=`bezlim`.`all`.`ip`) LEFT JOIN   `freenibs`.`pipes` ON (`freenibs`.`pipes`.`bw`=`bezlim`.`all`.`bw1` AND `freenibs`.`pipes`.`bw`&gt;0) WHERE `bezlim`.`all`.`bw1`&gt;0 AND `bezlim`.`all`.`ip` not LIKE &#39;deny.%&#39;&#34;);
             while (query1.next()) {
                     QString nums = query1.value(0).toString();
                     qint64 numi = query1.value(0).toInt();
                     QString ips = query1.value(1).toString();

            if(numi&gt;0) {
                    //qDebug()&amp;lt;&amp;lt;&#34;NUM&gt;0|&#34;&amp;lt;&amp;lt;num1&amp;lt;&amp;lt;&#34;|&#34;&amp;lt;&amp;lt;endl;
                    /*exec_this =&#34;/sbin/ipfw pipe &#34;;
                    exec_this +=num1;
                    exec_this +=&#34; config mask dst-ip 0x000000ff bw &#34;;
                    exec_this +=bw2;
                    exec_this +=&#34;Kbit/s&#34;;
                    */
                    //system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

                    exec_this =&#34;/sbin/ipfw table &#34;;
                    exec_this +=nums;
                    exec_this +=&#34; add &#34;;
                    exec_this +=ips;
                    system(exec_this.toStdString().c_str());
                    //qDebug()&amp;lt;&amp;lt;nums&amp;lt;&amp;lt;&#34;  &#34;&amp;lt;&amp;lt;ips&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;exec_this&amp;lt;&amp;lt;endl;

        }
       }
        //qDebug()&amp;lt;&amp;lt;query1.lastError()&amp;lt;&amp;lt;endl;
            query1.clear();
     db.close();
}
&lt;/pre&gt;

&lt;pre lang=&#34;sql&#34; line=&#34;1&#34;&gt;-- phpMyAdmin SQL Dump
-- version 3.1.2
-- http://www.phpmyadmin.net
--

SET SQL_MODE=&#34;NO_AUTO_VALUE_ON_ZERO&#34;;

--
-- База данных: `freenibs`
--

-- --------------------------------------------------------

--
-- Структура таблицы `pipes`
--

DROP TABLE IF EXISTS `pipes`;
CREATE TABLE IF NOT EXISTS `pipes` (
  `id` int(255) NOT NULL auto_increment,
  `n` int(255) NOT NULL default &#39;11&#39;,
  `bw` int(255) default &#39;0&#39;,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `bw` (`bw`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=63 ;


-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `user` varchar(64) character set latin1 collate latin1_bin NOT NULL default &#39;&#39;,
  `password` varchar(254) character set latin1 collate latin1_bin NOT NULL default &#39;*&#39;,
  `crypt_method` tinyint(1) unsigned NOT NULL default &#39;1&#39;,
  `uid` smallint(5) unsigned NOT NULL auto_increment,
  `gid` smallint(5) unsigned NOT NULL default &#39;1&#39;,
  `deposit` double(8,2) NOT NULL default &#39;0.00&#39;,
  `credit` double(8,2) NOT NULL default &#39;0.00&#39;,
  `fio` varchar(128) NOT NULL default &#39;&#39;,
  `name` varchar(128) default NULL,
  `second_name` varchar(128) default NULL,
  `otch` varchar(128) default NULL,
  `phone` varchar(128) NOT NULL default &#39;&#39;,
  `address` varchar(128) NOT NULL default &#39;&#39;,
  `prim` varchar(254) NOT NULL default &#39;&#39;,
  `add_date` date NOT NULL default &#39;0000-00-00&#39;,
  `tos` tinyint(1) default NULL,
  `do_with_tos` tinyint(1) default NULL,
  `direction` tinyint(1) default NULL,
  `fixed` tinyint(1) default NULL,
  `fixed_cost` double(16,6) default NULL,
  `activation_time` bigint(15) default NULL,
  `total_time_limit` bigint(15) default NULL,
  `month_time_limit` bigint(15) default NULL,
  `week_time_limit` bigint(15) default NULL,
  `day_time_limit` bigint(15) default NULL,
  `total_traffic_limit` bigint(15) default NULL,
  `month_traffic_limit` bigint(15) default NULL,
  `week_traffic_limit` bigint(15) default NULL,
  `day_traffic_limit` bigint(15) default NULL,
  `total_money_limit` double(16,6) default NULL,
  `month_money_limit` double(16,6) default NULL,
  `week_money_limit` double(16,6) default NULL,
  `day_money_limit` double(16,6) default NULL,
  `login_time` varchar(254) default NULL,
  `huntgroup_name` varchar(64) default NULL,
  `simultaneous_use` smallint(5) default NULL,
  `port_limit` smallint(5) default NULL,
  `session_timeout` bigint(15) default NULL,
  `idle_timeout` bigint(15) default NULL,
  `allowed_prefixes` varchar(64) default NULL,
  `no_pass` tinyint(1) default NULL,
  `no_acct` tinyint(1) default NULL,
  `allow_callback` tinyint(1) default NULL,
  `other_params` varchar(254) default NULL,
  `allowed_servers` varchar(254) default NULL,
  `blocked` tinyint(3) unsigned NOT NULL default &#39;0&#39;,
  `activated` tinyint(3) unsigned NOT NULL default &#39;1&#39;,
  `expired` date NOT NULL default &#39;0000-00-00&#39;,
  `total_time` int(10) NOT NULL default &#39;0&#39;,
  `total_traffic` bigint(15) NOT NULL default &#39;0&#39;,
  `total_money` double(10,4) NOT NULL default &#39;0.0000&#39;,
  `last_connection` date NOT NULL default &#39;0000-00-00&#39;,
  `framed_ip` varchar(16) NOT NULL default &#39;&#39;,
  `frammed_ip2` varchar(16) NOT NULL,
  `local_addr` varchar(16) NOT NULL,
  `framed_mask` varchar(16) NOT NULL default &#39;255.255.255.255&#39;,
  `callback_number` varchar(64) NOT NULL default &#39;&#39;,
  `street` varchar(255) NOT NULL,
  `house` varchar(64) NOT NULL,
  `room` varchar(64) NOT NULL,
  `bezabon` enum(&#39;no&#39;,&#39;yes&#39;) NOT NULL default &#39;no&#39;,
  `segment` varchar(255) NOT NULL,
  `mac_addr` varchar(17) NOT NULL,
  `updown` set(&#39;down&#39;,&#39;up&#39;) NOT NULL default &#39;down&#39;,
  `up_n` int(11) NOT NULL default &#39;0&#39;,
  `fix` int(2) NOT NULL default &#39;0&#39;,
  `vlan_for_fix` varchar(25) NOT NULL default &#39;vlan4&#39;,
  PRIMARY KEY  (`uid`),
  KEY `user` (`user`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1043 ;






--
-- База данных: `bezlim`
--

-- --------------------------------------------------------

--
-- Структура таблицы `all`
--

DROP TABLE IF EXISTS `all`;
CREATE TABLE IF NOT EXISTS `all` (
  `ip` varchar(48) NOT NULL default &#39;192.168.0.1&#39;,
  `rule` int(32) NOT NULL default &#39;500&#39;,
  `bw1` varchar(12) NOT NULL default &#39;0&#39;,
  `bw2` varchar(12) NOT NULL default &#39;0&#39;,
  `activ` char(1) NOT NULL default &#39;y&#39;,
  `id` int(32) NOT NULL auto_increment,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `ip` (`ip`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3326 ;


&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Очистка базы биллинга freeNIBS от данных старше 3-х месяцев</title>
      <link>http://b-comm.ru/billing/%D0%BE%D1%87%D0%B8%D1%81%D1%82%D0%BA%D0%B0-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B1%D0%B8%D0%BB%D0%BB%D0%B8%D0%BD%D0%B3%D0%B0-freenibs-%D0%BE%D1%82-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D1%81%D1%82%D0%B0%D1%80</link>
      <pubDate>Sat, 25 Jul 2009 10:53:20 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D0%BE%D1%87%D0%B8%D1%81%D1%82%D0%BA%D0%B0-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B1%D0%B8%D0%BB%D0%BB%D0%B8%D0%BD%D0%B3%D0%B0-freenibs-%D0%BE%D1%82-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D1%81%D1%82%D0%B0%D1%80</guid>
      <description>&lt;p&gt;Очистка базы биллинга freeNIBS от данных старше 3-х месяцев, хотя можно и больше оставить, можно и меньше.&lt;/p&gt;

&lt;p&gt;Дело в том, что база actions разрастается &amp;#8212; выборка медленее, мускулу тяжелее)))&lt;/p&gt;

&lt;p&gt;15592000 &amp;#8212; это число в секундах, почти 59 дней)))&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre lang=&#34;cpp&#34; line=&#34;1&#34;&gt;#include &amp;lt;QtCore&gt;
#include &amp;lt;QCoreApplication&gt;
#include &amp;lt;QtSql&gt;
#include &amp;lt;iostream&gt;
#include &amp;lt;cstdlib&gt;
#include &amp;lt;iomanip&gt;
#include &amp;lt;stdio.h&gt;
#include &amp;lt;stdlib.h&gt;
#include &amp;lt;string.h&gt;
#include &amp;lt;time.h&gt;
using namespace std;


#define SQLDRIVER &#34;QMYSQL&#34;
#define HOST &#34;10.1.1.1&#34;
#define DBNAME &#34;freenibs&#34;
#define USER &#34;freenibs&#34;
#define PASSWORD &#34;freenibs&#34;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QTextCodec *codec = QTextCodec::codecForName(&#34;CP1251&#34;);
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForCStrings(codec);

    QSqlDatabase db = QSqlDatabase::addDatabase(SQLDRIVER);

    if( !db.isDriverAvailable(SQLDRIVER))
    {

    }


    db.setHostName(HOST);
    db.setDatabaseName(DBNAME);
    db.setUserName(USER);
    db.setPassword(PASSWORD);
    //db.setPort(3306);
    bool ok=db.open();
    if(ok!=true){
        std::cout&amp;lt;&amp;lt;&#34;unable connec&#39;t&#34;;
        exit(1);
    }
    // QString exec_this;

    QVector&amp;lt;QString&gt; tables(0);
    tables.append(&#34;`actions`&#34;);







//очищаем таблица actions
            QSqlQuery query(&#34; DELETE FROM `actions` WHERE `start_time`&amp;lt;FROM_UNIXTIME(UNIX_TIMESTAMP(NOW() )-15592000); &#34;);
            query.clear();

            QSqlQuery query1(&#34; OPTIMIZE TABLE `actions`; &#34;);
            query1.clear();
//очищаем таблица updown
            QSqlQuery query4(&#34; DELETE FROM `updown` WHERE `time`&amp;lt;FROM_UNIXTIME(UNIX_TIMESTAMP(NOW() )-15592000); &#34;);
            query4.clear();

            QSqlQuery query5(&#34; OPTIMIZE TABLE `updown`; &#34;);
            query5.clear();

            //qDebug()&amp;lt;&amp;lt;query.lastError()&amp;lt;&amp;lt;endl;


     db.close();
//    return a.exec();
}

&lt;/pre&gt;

&lt;p&gt;Makefile:&lt;/p&gt;

&lt;pre lang=&#34;makefile&#34; line=&#34;1&#34;&gt;#############################################################################
# Makefile for building: freenibs_clear
# Generated by qmake (2.01a) (Qt 4.4.3) on: Sun Mar 15 02:29:55 2009
# Project:  pro.pro
# Template: app
# Command: /usr/local/bin/qmake-qt4 -unix -o Makefile pro.pro
#############################################################################

####### Compiler, tools and options

CC            = cc
CXX           = c++
DEFINES       = -DQT_NO_DEBUG -DQT_SQL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
INCPATH       = -I/usr/local/share/qt4/mkspecs/freebsd-g++ -I. -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4 -I. -I. -I/usr/local/include
LINK          = c++
LFLAGS        = -pthread -Wl,-rpath,/usr/local/lib/qt4
LIBS          = $(SUBLIBS)  -L/usr/local/lib -L/usr/local/lib/qt4 -lQtSql -L/usr/local/lib/qt4 -L/usr/local/lib -pthread -pthread -lQtGui -pthread -lpng -lSM -lICE -pthread -pthread -lXi -lXrender -lXrandr -lfreetype -lfontconfig -lXext -lX11 -lQtCore -lz -lm -pthread -lgthread-2.0 -lglib-2.0 -liconv
AR            = ar cqs
RANLIB        =
QMAKE         = /usr/local/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -R
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = $(COPY_FILE)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp
OBJECTS       = main.o
DIST          = /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                pro.pro
QMAKE_TARGET  = freenibs_clear
DESTDIR       =
TARGET        = freenibs_clear

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cc.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cxx.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.C.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.c.o:
        $(CC) -c $(CFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)
        $(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: pro.pro  /usr/local/share/qt4/mkspecs/freebsd-g++/qmake.conf /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                /usr/local/lib/qt4/libQtSql.prl \
                /usr/local/lib/qt4/libQtCore.prl \
                /usr/local/lib/qt4/libQtGui.prl
        $(QMAKE) -unix -o Makefile pro.pro
/usr/local/share/qt4/mkspecs/common/unix.conf:
/usr/local/share/qt4/mkspecs/qconfig.pri:
/usr/local/share/qt4/mkspecs/features/qt_functions.prf:
/usr/local/share/qt4/mkspecs/features/qt_config.prf:
/usr/local/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/local/share/qt4/mkspecs/features/default_pre.prf:
/usr/local/share/qt4/mkspecs/features/release.prf:
/usr/local/share/qt4/mkspecs/features/default_post.prf:
/usr/local/share/qt4/mkspecs/features/unix/thread.prf:
/usr/local/share/qt4/mkspecs/features/warn_on.prf:
/usr/local/share/qt4/mkspecs/features/qt.prf:
/usr/local/share/qt4/mkspecs/features/moc.prf:
/usr/local/share/qt4/mkspecs/features/resources.prf:
/usr/local/share/qt4/mkspecs/features/uic.prf:
/usr/local/share/qt4/mkspecs/features/yacc.prf:
/usr/local/share/qt4/mkspecs/features/lex.prf:
/usr/local/lib/qt4/libQtSql.prl:
/usr/local/lib/qt4/libQtCore.prl:
/usr/local/lib/qt4/libQtGui.prl:
qmake:  FORCE
        @$(QMAKE) -unix -o Makefile pro.pro

dist:
        @$(CHK_DIR_EXISTS) .tmp/freenibs_clear1.0.0 || $(MKDIR) .tmp/freenibs_clear1.0.0
        $(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/freenibs_clear1.0.0/ &amp;#038;&amp;#038; $(COPY_FILE) --parents main.cpp .tmp/freenibs_clear1.0.0/ &amp;#038;&amp;#038; (cd `dirname .tmp/freenibs_clear1.0.0` &amp;#038;&amp;#038; $(TAR) freenibs_clear1.0.0.tar freenibs_clear1.0.0 &amp;#038;&amp;#038; $(COMPRESS) freenibs_clear1.0.0.tar) &amp;#038;&amp;#038; $(MOVE) `dirname .tmp/freenibs_clear1.0.0`/freenibs_clear1.0.0.tar.gz . &amp;#038;&amp;#038; $(DEL_FILE) -r .tmp/freenibs_clear1.0.0


clean:compiler_clean
        -$(DEL_FILE) $(OBJECTS)
        -$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
        -$(DEL_FILE) $(TARGET)
        -$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
        -$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean:

####### Compile

main.o: main.cpp
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:


&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Работа с зависшими пользователями</title>
      <link>http://b-comm.ru/billing/%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D1%88%D0%B8%D0%BC%D0%B8-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F%D0%BC%D0%B8</link>
      <pubDate>Thu, 23 Jul 2009 11:09:52 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D1%88%D0%B8%D0%BC%D0%B8-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F%D0%BC%D0%B8</guid>
      <description>&lt;p&gt;Работа с зависшими пользователями, zapped users)))&lt;/p&gt;

&lt;p&gt;В наличии FreeBSD сервер, mpd5/mpd4 сервер доступа.&lt;/p&gt;

&lt;p&gt;Давно нарыл скрипт, который киляет зависших пользователей при таймауте сессии в 180сек. Я пытался меньше сделать &amp;#8212; но ничего не получается, нормальные сессии падают(((&lt;/p&gt;

&lt;p&gt;freez_user_kill.sh:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre lang=&#34;bash&#34; line=&#34;1&#34;&gt;#!/bin/sh

USER=&#39;freenibs&#39;
PASSWORD=&#39;freenibs&#39;
DATABASE=&#39;freenibs&#39;
#USER=&#39;root&#39;

TIMEOUT=180

res=`/usr/local/bin/mysql -B -s -u $USER -p$PASSWORD $DATABASE -e \
&#34;select unique_id from actions \
where terminate_cause = &#39;Online&#39; and (UNIX_TIMESTAMP() - last_change) &gt; $TIMEOUT&#34;`

#Можно использовать and server=&#39;127.0.0.1&#39; или любой другой ИП для СЕРВЕРА доступа)))

nasport=`/usr/local/bin/mysql -B -s -u $USER -p$PASSWORD $DATABASE -e \
&#34;select port from actions \
where terminate_cause = &#39;Online&#39;   and (UNIX_TIMESTAMP() - last_change) &gt; $TIMEOUT&#34;`



if [ -n &#34;$res&#34; ]; then
echo &#34;session ids:&#34; $res
echo &#34;nasport:&#34; $nasport

res=`/usr/local/bin/mysql -B -s -u $USER -p$PASSWORD $DATABASE -e \
&#34;update actions set terminate_cause = &#39;User-Request&#39;, \
stop_time = date_add(start_time, interval ifnull(time_on, 0) second) \
where terminate_cause = &#39;Online&#39;  and (UNIX_TIMESTAMP() - last_change) &gt; $TIMEOUT&#34;`
fi

for p in $nasport; do
/usr/local/etc/raddb/userkill.pl 1 2 3 $p

done


&lt;/pre&gt;

&lt;p&gt;Скрипт непосредственного &amp;#171;сбрасывания&amp;#187; пользователя -/usr/local/etc/raddb/userkill.pl.&lt;/p&gt;

&lt;p&gt;Но с этим скриптом есть беда после использования mpd5.4 &amp;#8212; у него такой параметр как nasport в базе billng&amp;#8217;a FreeNIBS не совпадает с тем чем надо))):&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; line=&#34;1&#34;&gt;#!/usr/local/bin/perl
#
#Это старая версия скрипта
#Тут надо вручную указывать сервер доступа
$hostname=&#34;127.0.0.1&#34;;
$port=&#34;5005&#34;;
if( $ARGV[3] eq &#39;&#39; ) { die &#39;Usage:  user nasip userip nasport&#39;; };

$user=$ARGV[0];
$nasip=$ARGV[1];
$userip=$ARGV[2];
$nasport=$ARGV[3];

#$nasport=$nasport+1;

$hostname=&#34;127.0.0.1&#34;;

$port=&#34;5005&#34;;

use Net::Telnet ();

$t = new Net::Telnet (Timeout =&gt; 2,Port =&gt; $port,Binmode =&gt; &#39;\015\012&#39;,
                               Prompt =&gt; &#39;/\[\]/&#39;);
$t-&gt;open(&#34;$hostname&#34;);
$t-&gt;login(&#34;mpd&#34;, &#34;mpd_password&#34;);

$t-&gt;print(&#34;link L-&#34;.$nasport);
$t-&gt;print(&#34;&#34;);
$t-&gt;print(&#34;close&#34;);
$t-&gt;print(&#34;&#34;);
$t-&gt;print(&#34;exit&#34;);
$t-&gt;print(&#34;&#34;);
$t-&gt;close();
exit 0;
&lt;/pre&gt;

&lt;pre lang=&#34;bash&#34;&gt;#pkg_info |grep perl
libtext-charwidth-perl-0.04 Documentation gettext tools
libtext-wrapi18n-perl-0.06 Documentation gettext tools
p5-DBI-1.60.7       The perl5 Database Interface.  Required for DBD::* modules
p5-Net-Radius-1.56  A perl module to manipulate RADIUS packets
p5-SNMP_Session-1.12 A perl5 module providing rudimentary access to SNMPv1 and v
p5-Scalar-List-Utils-1.19,1 Perl subroutines that would be nice to have in the perl cor
p5-Storable-2.18    Persistency for perl data structures
p5-Term-ReadKey-2.30 A perl5 module for simple terminal control
p5-Test-Harness-3.14_2 Run perl standard test scripts with statistics
p5-Test-Simple-0.86 Basic utilities for writing tests in perl
p5-Time-HiRes-1.9719,1 A perl5 module implementing High resolution time, sleep, an
perl-5.8.9_1        Practical Extraction and Report Language

[13:20] wel@server  /usr/home/wel #uname -a
FreeBSD server.home 6.2-RELEASE-p12 FreeBSD 6.2-RELEASE-p12 #11: Mon Jan  5 02:37:52 EET 2009     wel@server.home:/usr/obj/usr/src/sys/SERVER  i386
&lt;/pre&gt;

&lt;p&gt;Нам надо &amp;#171;подконфигурировать&amp;#187; mpd5:&lt;/p&gt;

&lt;p&gt;/usr/local/etc/mpd5/mpd.conf а именно надо следить, что бы в конце были заветные admin!!!:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;startup:
    set user foo bar admin
&lt;/pre&gt;

&lt;p&gt;Дальше пример сессии:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34; line=&#34;1&#34;&gt;/home/wel &gt;telnet 127.0.0.1 5005
Connected to 127.0.0.1.
Escape character is &#39;^]&#39;.
Multi-link PPP daemon for FreeBSD

Username: mpd
Password:

Welcome!
Mpd pid 5377, version 5.5 (root@nas1 03:47  1-Dec-2010)
[] show summary
Current daemon status summary
Iface   Bund            Link    LCP     Device          User            From
                        L       Initial pptp    DOWN                    UNSPEC
                        L1      Initial pptp    DOWN                    UNSPEC
                        L2      Initial pptp    DOWN                    UNSPEC
        B       Down
        B1      Down
        B2      Down
ng44    B-47    Up      L-47    Opened  pptp    UP          slim        10.1.20.18
[]
[]
Available commands:
 authname : Choose link by auth name     bundle   : Choose/list bundles
 close    : Close a layer                create   : Create new item
 destroy  : Destroy item                 exit     : Exit console
 iface    : Choose bundle by iface       help     : Help on any command
 link     : Choose link                  load     : Read from config file
 log      : Set/view log options         msession : Ch. bundle by msession-id
 open     : Open a layer                 quit     : Quit program
 repeater : Choose/list repeaters        session  : Choose link by session-id
 set      : Set parameters               show     : Show status
[] authname slim
[L-47]

&lt;/pre&gt;

&lt;p&gt;Как видно по имени пользователя Я перешёл на [L-47]&lt;/p&gt;

&lt;p&gt;Новая версия /usr/local/etc/raddb/userkill_nas_new.pl:&lt;/p&gt;

&lt;pre lang=&#34;perl&#34; line=&#34;1&#34;&gt;#!/usr/local/bin/perl
#
#Это новая версия скрипта
#Тут не надо вручную указывать сервер доступа
$hostname=&#34;127.0.0.1&#34;;
$port=&#34;5005&#34;;
if( $ARGV[3] eq &#39;&#39; ) { die &#39;Usage:  user nasip userip nasport&#39;; };

$user=$ARGV[0];
$nasip=$ARGV[1];
$userip=$ARGV[2];
$nasport=$ARGV[3];

#$nasport=$nasport+1;

#$hostname=&#34;127.0.0.1&#34;;
$hostname=$nasip;

$port=&#34;5005&#34;;

use Net::Telnet ();

$t = new Net::Telnet (Timeout =&gt; 2,Port =&gt; $port,Binmode =&gt; &#39;\015\012&#39;,
                               Prompt =&gt; &#39;/\[\]/&#39;);
$t-&gt;open(&#34;$hostname&#34;);
$t-&gt;login(&#34;mpd&#34;, &#34;mpd_password&#34;);

$t-&gt;print(&#34;link L-&#34;.$nasport);
$t-&gt;print(&#34;&#34;);
$t-&gt;print(&#34;authname &#34;.$user);
$t-&gt;print(&#34;&#34;);
$t-&gt;print(&#34;close&#34;);
$t-&gt;print(&#34;&#34;);
$t-&gt;print(&#34;exit&#34;);
$t-&gt;print(&#34;&#34;);
$t-&gt;close();
exit 0;
&lt;/pre&gt;

&lt;p&gt;Новая версия скрипта для сбрасывания пользователей:&lt;/p&gt;

&lt;p&gt;freez_user_kill.php&lt;/p&gt;

&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;#!/usr/local/bin/php
&lt;?php
$link = mysql_connect(&#39;10.1.1.1&#39;, &#39;freenibs&#39;, &#39;freenibs&#39;);
if (!$link) {
        die(&#39;Could not connect: &#39; . mysql_error());
}
/*  */

mysql_select_db(&#34;freenibs&#34;);

$TIMEOUT=180;


$q=&#34;select 
       `unique_id`,
       `port`,
       `user`,
       `client_ip`,
       `server`
from 
       `actions`
where 
         `terminate_cause` = &#39;Online&#39; and (UNIX_TIMESTAMP() - last_change) &gt; $TIMEOUT&#34;;

$result = mysql_query($q);
$num_rows = mysql_num_rows($result);
if($num_rows&gt;0){
         while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
                $unique_id=$row[&#39;unique_id&#39;];
                $port=$row[&#39;port&#39;];
                $user=$row[&#39;user&#39;];
                $server=$row[&#39;server&#39;];
                 $userip=$row[&#39;client_ip&#39;];
                 echo &#34;session: &#34;.$unique_id.&#34; will rise :)\n&#34;;
                $last_line = system(&#39;/usr/local/etc/raddb/userkill_nas_new.pl &#39;.$user.&#39; &#39;.$server.&#39; &#39;.$userip.&#39; &#39;.$port.&#34;&#34;, $retval);
         }


//чистим сессии
//только смотрите - могут новые появиться, пока выполнялся скрипт
//можно так)))
$TIMEOUT=+2;

$q=&#34;update actions set terminate_cause = &#39;User-Request&#39;, \
stop_time = date_add(start_time, interval ifnull(time_on, 0) second) \
where terminate_cause = &#39;Online&#39;  and (UNIX_TIMESTAMP() - last_change) &gt; $TIMEOUT&#34;;
$result = mysql_query($q);

}

&lt;/pre&gt;

&lt;p&gt;В кронтаб (crontab)&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;*/5        *    *       *       *       root    /usr/local/etc/mpd5/freez_user_kill.php  2&gt;&amp;1
&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Скрипт обслуживания таблиц базы данных при запуске</title>
      <link>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%BE%D0%B1%D1%81%D0%BB%D1%83%D0%B6%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD</link>
      <pubDate>Thu, 23 Jul 2009 10:11:00 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%BE%D0%B1%D1%81%D0%BB%D1%83%D0%B6%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD</guid>
      <description>&lt;p&gt;Скрипт обслуживания таблиц базы данных при запуске компьютера.&lt;/p&gt;

&lt;p&gt;Идея состоит в том, что не нужно париться в моменты рестарта сервера, коннектиться к нему и восстанавливать таблицы.&lt;/p&gt;

&lt;p&gt;Конечно это случалось редко, но всё же случалось и тогда такой скрипт помогал.&lt;/p&gt;

&lt;p&gt;Плюс не сомненно в том, что таблицы чекаются, оптимизируются при старте &amp;#8212; это Мне помогнало в freenibs&amp;#8217;е увеличивать скорость выборки)))&lt;/p&gt;

&lt;p&gt;main.cpp:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre lang=&#34;cpp&#34; line=&#34;1&#34;&gt;#include &amp;lt;QtCore&gt;
#include &amp;lt;QCoreApplication&gt;
#include &amp;lt;QtSql&gt;
#include &amp;lt;iostream&gt;
#include &amp;lt;cstdlib&gt;
#include &amp;lt;iomanip&gt;
#include &amp;lt;stdio.h&gt;
#include &amp;lt;stdlib.h&gt;
#include &amp;lt;string.h&gt;
#include &amp;lt;time.h&gt;
using namespace std;


#define SQLDRIVER &#34;QMYSQL&#34;
#define HOST &#34;10.1.1.1&#34;
#define DBNAME &#34;freenibs&#34;
#define USER &#34;freenibs&#34;
#define PASSWORD &#34;freenibs&#34;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QTextCodec *codec = QTextCodec::codecForName(&#34;CP1251&#34;);
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForCStrings(codec);

    QSqlDatabase db = QSqlDatabase::addDatabase(SQLDRIVER);

    if( !db.isDriverAvailable(SQLDRIVER))
    {

    }


    db.setHostName(HOST);
    db.setDatabaseName(DBNAME);
    db.setUserName(USER);
    db.setPassword(PASSWORD);
    //db.setPort(3306);
    bool ok=db.open();
    if(ok!=true){
        std::cout&amp;lt;&amp;lt;&#34;unable connec&#39;t&#34;;
        exit(1);
    }
    // QString exec_this;

    QVector&amp;lt;QString&gt; tables(0);
    tables.append(&#34;`actions`&#34;);
    tables.append(&#34;`adress`&#34;);
    tables.append(&#34;`arpwatch`&#34;);
    tables.append(&#34;`balcklist`&#34;);
    tables.append(&#34;`client_problem`&#34;);
    tables.append(&#34;`holidays`&#34;);
    tables.append(&#34;`packets`&#34;);
    tables.append(&#34;`pipes`&#34;);
    tables.append(&#34;`prev`&#34;);
    tables.append(&#34;`prices`&#34;);
    tables.append(&#34;`smtp`&#34;);
    tables.append(&#34;`smtp_black`&#34;);
    tables.append(&#34;`smtp_log`&#34;);
    tables.append(&#34;`system`&#34;);
    tables.append(&#34;`updown`&#34;);
    tables.append(&#34;`users`&#34;);
    tables.append(&#34;`zakaz`&#34;);
    tables.append(&#34;`zakaz_history`&#34;);

    for(int i=0;i&amp;lt;tables.size();++i)
    {
            QSqlQuery query(&#34;CHECK TABLE &#34;+tables.at(i)+&#34; &#34;);
            query.clear();
            QSqlQuery query1(&#34;ANALYZE TABLE &#34;+tables.at(i)+&#34; &#34;);
            query1.clear();
            QSqlQuery query2(&#34;REPAIR TABLE &#34;+tables.at(i)+&#34; &#34;);
            query2.clear();
            QSqlQuery query3(&#34;OPTIMIZE TABLE &#34;+tables.at(i)+&#34; &#34;);
            query3.clear();
            QSqlQuery query4(&#34;FLUSH TABLE &#34;+tables.at(i)+&#34; &#34;);
            query4.clear();
            //qDebug()&amp;lt;&amp;lt;query.lastError()&amp;lt;&amp;lt;endl;
     }
     db.close();
//    return a.exec();
}
&lt;/pre&gt;

&lt;p&gt;Makefile:&lt;/p&gt;

&lt;pre lang=&#34;makefile&#34; line=&#34;1&#34;&gt;#############################################################################
# Makefile for building: freenibs-start
# Generated by qmake (2.01a) (Qt 4.4.3) on: Sun Mar 15 02:24:54 2009
# Project:  pro.pro
# Template: app
# Command: /usr/local/bin/qmake-qt4 -unix -o Makefile pro.pro
#############################################################################

####### Compiler, tools and options

CC            = cc
CXX           = c++
DEFINES       = -DQT_NO_DEBUG -DQT_SQL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
INCPATH       = -I/usr/local/share/qt4/mkspecs/freebsd-g++ -I. -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4 -I. -I. -I/usr/local/include
LINK          = c++
LFLAGS        = -pthread -Wl,-rpath,/usr/local/lib/qt4
LIBS          = $(SUBLIBS)  -L/usr/local/lib -L/usr/local/lib/qt4 -lQtSql -L/usr/local/lib/qt4 -L/usr/local/lib -pthread -pthread -lQtGui -pthread -lpng -lSM -lICE -pthread -pthread -lXi -lXrender -lXrandr -lfreetype -lfontconfig -lXext -lX11 -lQtCore -lz -lm -pthread -lgthread-2.0 -lglib-2.0 -liconv
AR            = ar cqs
RANLIB        =
QMAKE         = /usr/local/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -R
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = $(COPY_FILE)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp
OBJECTS       = main.o
DIST          = /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                pro.pro
QMAKE_TARGET  = freenibs-start
DESTDIR       =
TARGET        = freenibs-start

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cc.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cxx.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.C.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.c.o:
        $(CC) -c $(CFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)
        $(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: pro.pro  /usr/local/share/qt4/mkspecs/freebsd-g++/qmake.conf /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                /usr/local/lib/qt4/libQtSql.prl \
                /usr/local/lib/qt4/libQtCore.prl \
                /usr/local/lib/qt4/libQtGui.prl
        $(QMAKE) -unix -o Makefile pro.pro
/usr/local/share/qt4/mkspecs/common/unix.conf:
/usr/local/share/qt4/mkspecs/qconfig.pri:
/usr/local/share/qt4/mkspecs/features/qt_functions.prf:
/usr/local/share/qt4/mkspecs/features/qt_config.prf:
/usr/local/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/local/share/qt4/mkspecs/features/default_pre.prf:
/usr/local/share/qt4/mkspecs/features/release.prf:
/usr/local/share/qt4/mkspecs/features/default_post.prf:
/usr/local/share/qt4/mkspecs/features/unix/thread.prf:
/usr/local/share/qt4/mkspecs/features/warn_on.prf:
/usr/local/share/qt4/mkspecs/features/qt.prf:
/usr/local/share/qt4/mkspecs/features/moc.prf:
/usr/local/share/qt4/mkspecs/features/resources.prf:
/usr/local/share/qt4/mkspecs/features/uic.prf:
/usr/local/share/qt4/mkspecs/features/yacc.prf:
/usr/local/share/qt4/mkspecs/features/lex.prf:
/usr/local/lib/qt4/libQtSql.prl:
/usr/local/lib/qt4/libQtCore.prl:
/usr/local/lib/qt4/libQtGui.prl:
qmake:  FORCE
        @$(QMAKE) -unix -o Makefile pro.pro

dist:
        @$(CHK_DIR_EXISTS) .tmp/freenibs-start1.0.0 || $(MKDIR) .tmp/freenibs-start1.0.0
        $(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/freenibs-start1.0.0/ &amp;#038;&amp;#038; $(COPY_FILE) --parents main.cpp .tmp/freenibs-start1.0.0/ &amp;#038;&amp;#038; (cd `dirname .tmp/freenibs-start1.0.0` &amp;#038;&amp;#038; $(TAR) freenibs-start1.0.0.tar freenibs-start1.0.0 &amp;#038;&amp;#038; $(COMPRESS) freenibs-start1.0.0.tar) &amp;#038;&amp;#038; $(MOVE) `dirname .tmp/freenibs-start1.0.0`/freenibs-start1.0.0.tar.gz . &amp;#038;&amp;#038; $(DEL_FILE) -r .tmp/freenibs-start1.0.0


clean:compiler_clean
        -$(DEL_FILE) $(OBJECTS)
        -$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
        -$(DEL_FILE) $(TARGET)
        -$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
        -$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean:

####### Compile

main.o: main.cpp
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:


&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Складирование arp записей мак-адресов с помощью скрипта arpwatch на qt4 &#43; mysql</title>
      <link>http://b-comm.ru/billing/%D1%81%D0%BA%D0%BB%D0%B0%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-arp-%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B5%D0%B9-%D0%BC%D0%B0%D0%BA-%D0%B0%D0%B4%D1%80%D0%B5%D1%81%D0%BE%D0%B2-%D1%81</link>
      <pubDate>Thu, 23 Jul 2009 01:09:17 +0000</pubDate>
      
      <guid>http://b-comm.ru/billing/%D1%81%D0%BA%D0%BB%D0%B0%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-arp-%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B5%D0%B9-%D0%BC%D0%B0%D0%BA-%D0%B0%D0%B4%D1%80%D0%B5%D1%81%D0%BE%D0%B2-%D1%81</guid>
      <description>&lt;p&gt;Дано: биллинг FreeNIBS 1.X &lt;em&gt;(можно что угодно)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Идея состояла в том, что у Нас есть активные пользователи, есть их ИП-ки, для Них Мы будем искать какие мак-адреса они имеют в текущий момент.&lt;/p&gt;

&lt;p&gt;Дальше Мы эти данные помещаем в базу freeNIBS.&lt;/p&gt;

&lt;p&gt;Я специально не добавил DROP IF exist&amp;#8230;&lt;/p&gt;

&lt;p&gt;Еще замечу, что переход на `actions` ENGINE=InnoDB плодотворно сказался на производительности и старенького компа под базу+freeNIBS стало вполне хватать.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre lang=&#34;sql&#34; line=&#34;1&#34;&gt;-- phpMyAdmin SQL Dump
-- version 3.1.2
-- http://www.phpmyadmin.net

SET SQL_MODE=&#34;NO_AUTO_VALUE_ON_ZERO&#34;;

--
-- База данных: `freenibs`
--

-- --------------------------------------------------------

--
-- Структура таблицы `actions`
--

CREATE TABLE IF NOT EXISTS `actions` (
  `user` varchar(64) NOT NULL default &#39;&#39;,
  `gid` smallint(100) NOT NULL default &#39;0&#39;,
  `id` varchar(32) NOT NULL default &#39;&#39;,
  `unique_id` varchar(64) NOT NULL default &#39;&#39;,
  `time_on` int(12) default NULL,
  `start_time` datetime NOT NULL default &#39;2003-01-01 00:00:00&#39;,
  `stop_time` datetime NOT NULL default &#39;0000-00-00 00:00:00&#39;,
  `in_bytes` bigint(255) default NULL,
  `out_bytes` bigint(255) default NULL,
  `ip` varchar(15) NOT NULL default &#39;&#39;,
  `server` varchar(15) NOT NULL default &#39;&#39;,
  `client_ip` varchar(15) NOT NULL default &#39;&#39;,
  `port` int(12) default NULL,
  `call_to` varchar(64) NOT NULL default &#39;&#39;,
  `call_from` varchar(64) NOT NULL default &#39;&#39;,
  `connect_info` varchar(254) default NULL,
  `protocol` varchar(32) default NULL,
  `terminate_cause` varchar(64) NOT NULL default &#39;&#39;,
  `comment` varchar(128) default NULL,
  `hour_in_bytes` bigint(255) unsigned NOT NULL default &#39;0&#39;,
  `hour_out_bytes` bigint(255) unsigned NOT NULL default &#39;0&#39;,
  `hour_traffic_money` double(10,4) NOT NULL default &#39;0.0000&#39;,
  `last_change` int(10) unsigned NOT NULL default &#39;0&#39;,
  `before_billing` double(10,4) NOT NULL default &#39;0.0000&#39;,
  `billing_minus` double(10,4) NOT NULL default &#39;0.0000&#39;,
  PRIMARY KEY  (`unique_id`),
  KEY `user` (`user`,`id`,`time_on`,`start_time`,`stop_time`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `user` varchar(64) character set latin1 collate latin1_bin NOT NULL default &#39;&#39;,
  `password` varchar(254) character set latin1 collate latin1_bin NOT NULL default &#39;*&#39;,
  `crypt_method` tinyint(1) unsigned NOT NULL default &#39;1&#39;,
  `uid` smallint(5) unsigned NOT NULL auto_increment,
  `gid` smallint(5) unsigned NOT NULL default &#39;1&#39;,
  `deposit` double(8,2) NOT NULL default &#39;0.00&#39;,
  `credit` double(8,2) NOT NULL default &#39;0.00&#39;,
  `fio` varchar(128) NOT NULL default &#39;&#39;,
  `name` varchar(128) default NULL,
  `second_name` varchar(128) default NULL,
  `otch` varchar(128) default NULL,
  `phone` varchar(128) NOT NULL default &#39;&#39;,
  `address` varchar(128) NOT NULL default &#39;&#39;,
  `prim` varchar(254) NOT NULL default &#39;&#39;,
  `add_date` date NOT NULL default &#39;0000-00-00&#39;,
  `tos` tinyint(1) default NULL,
  `do_with_tos` tinyint(1) default NULL,
  `direction` tinyint(1) default NULL,
  `fixed` tinyint(1) default NULL,
  `fixed_cost` double(16,6) default NULL,
  `activation_time` bigint(15) default NULL,
  `total_time_limit` bigint(15) default NULL,
  `month_time_limit` bigint(15) default NULL,
  `week_time_limit` bigint(15) default NULL,
  `day_time_limit` bigint(15) default NULL,
  `total_traffic_limit` bigint(15) default NULL,
  `month_traffic_limit` bigint(15) default NULL,
  `week_traffic_limit` bigint(15) default NULL,
  `day_traffic_limit` bigint(15) default NULL,
  `total_money_limit` double(16,6) default NULL,
  `month_money_limit` double(16,6) default NULL,
  `week_money_limit` double(16,6) default NULL,
  `day_money_limit` double(16,6) default NULL,
  `login_time` varchar(254) default NULL,
  `huntgroup_name` varchar(64) default NULL,
  `simultaneous_use` smallint(5) default NULL,
  `port_limit` smallint(5) default NULL,
  `session_timeout` bigint(15) default NULL,
  `idle_timeout` bigint(15) default NULL,
  `allowed_prefixes` varchar(64) default NULL,
  `no_pass` tinyint(1) default NULL,
  `no_acct` tinyint(1) default NULL,
  `allow_callback` tinyint(1) default NULL,
  `other_params` varchar(254) default NULL,
  `allowed_servers` varchar(254) default NULL,
  `blocked` tinyint(3) unsigned NOT NULL default &#39;0&#39;,
  `activated` tinyint(3) unsigned NOT NULL default &#39;1&#39;,
  `expired` date NOT NULL default &#39;0000-00-00&#39;,
  `total_time` int(10) NOT NULL default &#39;0&#39;,
  `total_traffic` bigint(15) NOT NULL default &#39;0&#39;,
  `total_money` double(10,4) NOT NULL default &#39;0.0000&#39;,
  `last_connection` date NOT NULL default &#39;0000-00-00&#39;,
  `framed_ip` varchar(16) NOT NULL default &#39;&#39;,
  `frammed_ip2` varchar(16) NOT NULL,
  `local_addr` varchar(16) NOT NULL,
  `framed_mask` varchar(16) NOT NULL default &#39;255.255.255.255&#39;,
  `callback_number` varchar(64) NOT NULL default &#39;&#39;,
  `street` varchar(255) NOT NULL,
  `house` varchar(64) NOT NULL,
  `room` varchar(64) NOT NULL,
  `bezabon` enum(&#39;no&#39;,&#39;yes&#39;) NOT NULL default &#39;no&#39;,
  `segment` varchar(255) NOT NULL,
  `mac_addr` varchar(17) NOT NULL,
  `updown` set(&#39;down&#39;,&#39;up&#39;) NOT NULL default &#39;down&#39;,
  `up_n` int(11) NOT NULL default &#39;0&#39;,
  `fix` int(2) NOT NULL default &#39;0&#39;,
  `vlan_for_fix` varchar(25) NOT NULL default &#39;vlan4&#39;,
  PRIMARY KEY  (`uid`),
  KEY `user` (`user`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1043 ;

&lt;/pre&gt;

&lt;p&gt;Вот он main.cpp:&lt;/p&gt;

&lt;pre lang=&#34;cpp&#34; line=&#34;1&#34;&gt;#include &amp;lt;QtCore&gt;
#include &amp;lt;QCoreApplication&gt;
#include &amp;lt;QtSql&gt;
#include &amp;lt;QFile&gt;
#include &amp;lt;iostream&gt;
#include &amp;lt;cstdlib&gt;
#include &amp;lt;iomanip&gt;
#include &amp;lt;stdio.h&gt;
#include &amp;lt;stdlib.h&gt;
#include &amp;lt;string.h&gt;
#include &amp;lt;time.h&gt;
using namespace std;


#define SQLDRIVER &#34;QMYSQL&#34;
#define HOST &#34;10.1.1.1&#34;
#define DBNAME &#34;freenibs&#34;
#define USER &#34;arpwatch&#34;
#define PASSWORD &#34;arpwatch&#34;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    QTextCodec *codec = QTextCodec::codecForName(&#34;CP1251&#34;);
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForCStrings(codec);
    QSqlDatabase db = QSqlDatabase::addDatabase(SQLDRIVER);
    if( !db.isDriverAvailable(SQLDRIVER))
    {
        exit(1);
    }

    db.setHostName(HOST);
    db.setDatabaseName(DBNAME);
    db.setUserName(USER);
    db.setPassword(PASSWORD);
    //db.setPort(3306);
    QFile file(&#34;/arpwatch.table&#34;);
    if (! file.exists() ){
        std::cout&amp;lt;&amp;lt;&#34; /arpwatch.table 1&#34;;
        db.close();
        exit(1);
    }
    if( !file.open(QIODevice::ReadOnly)){
        std::cout&amp;lt;&amp;lt;&#34; /arpwatch.table 2&#34;;
        db.close();
        exit(1);
    }
    bool ok=db.open();
    if(ok!=true){
        std::cout&amp;lt;&amp;lt;&#34;unable connec&#39;t&#34;;
        exit(1);
    }

     QString ip_argv,mac,user;
     ip_argv=argv[1];
     mac=argv[2];

     //qDebug()&amp;lt;&amp;lt;ip_argv;
     int z=0;
     while (!file.atEnd()) {
         QString line = file.readLine();
         z=0;
         mac=&#34;&#34;;
         ip_argv=&#34;&#34;;
         user=&#34;&#34;;


        for(int i=0;i&amp;lt;line.size();++i){
            if(z==1)
                z=2;

            if(line.at(i)==&#39;K&#39;)
                z=1;
            if(line.at(i)==&#39;L&#39;)
                z=3;

            if(z==0)
                ip_argv.append(line.at(i));


            if(z==2)
                mac.append(line.at(i));
        }

     QSqlQuery query(&#34;SELECT `user` FROM `actions` WHERE `call_from` = &#39;&#34;+ip_argv+&#34;&#39; AND `start_time` &gt; FROM_UNIXTIME( UNIX_TIMESTAMP( NOW( ) ) -604800 ) GROUP BY `user` LIMIT 1&#34;);
     while (query.next()) {
        user = query.value(0).toString();
        //qDebug()&amp;lt;&amp;lt;ip_argv&amp;lt;&amp;lt;&#34; ---&gt; &#34;&amp;lt;&amp;lt;user;
        //qDebug()&amp;lt;&amp;lt;ip_argv&amp;lt;&amp;lt;&#34; ---&gt; &#34;&amp;lt;&amp;lt;user&amp;lt;&amp;lt;&#34;---&gt;&#34;&amp;lt;&amp;lt;mac&amp;lt;&amp;lt;endl;
        //qDebug()&amp;lt;&amp;lt;&#34;SELECT `user` FROM `actions` WHERE `call_from` = &#39;&#34;+ip_argv+&#34;&#39; AND `start_time` &gt; FROM_UNIXTIME( UNIX_TIMESTAMP( NOW( ) ) -604800 ) GROUP BY `user`&#34;;
        query.clear();
        query.prepare(&#34;UPDATE `freenibs`.`users` SET `freenibs`.`users`.`mac_addr` = &#39;&#34;+mac+&#34;&#39; WHERE `freenibs`.`users`.`user` =&#39;&#34;+user+&#34;&#39; LIMIT 1&#34;);
                //QSqlQuery query1(&#34;UPDATE `freenibs`.`users` SET `freenibs`.`users`.`mac_addr` = &#39;&#34;+mac+&#34;&#39; WHERE `freenibs`.`users`.`user` =&#39;&#34;+user+&#34;&#39; LIMIT 1&#34;);
        query.exec();
                //query1.clear();
        }



        }
        file.close();

        //dhcpd

        file1.close();
        file2.close();
        db.close();
}

&lt;/pre&gt;

&lt;p&gt;Makefile: (FreeBSD)&lt;/p&gt;

&lt;p&gt;Сборка просто make:)))&lt;/p&gt;

&lt;pre lang=&#34;make&#34; line=&#34;1&#34;&gt;#############################################################################
# Makefile for building: arp_watch
# Generated by qmake (2.01a) (Qt 4.4.3) on: Thu Jul 23 00:39:55 2009
# Project:  pro.pro
# Template: app
# Command: /usr/local/bin/qmake-qt4 -unix -o Makefile pro.pro
#############################################################################

####### Compiler, tools and options

CC            = cc
CXX           = c++
DEFINES       = -DQT_NO_DEBUG -DQT_SQL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -O2 -fno-strict-aliasing -pipe -Wall -W $(DEFINES)
INCPATH       = -I/usr/local/share/qt4/mkspecs/freebsd-g++ -I. -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtCore -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtGui -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4/QtSql -I/usr/local/include/qt4 -I. -I. -I/usr/local/include
LINK          = c++
LFLAGS        = -pthread -Wl,-rpath,/usr/local/lib/qt4
LIBS          = $(SUBLIBS)  -L/usr/local/lib -L/usr/local/lib/qt4 -lQtSql -L/usr/local/lib/qt4 -L/usr/local/lib -pthread -pthread -lQtGui -pthread -lpng -lSM -lICE -pthread -pthread -lXi -lXrender -lXrandr -lfreetype -lfontconfig -lXext -lX11 -lQtCore -lz -lm -pthread -lgthread-2.0 -lglib-2.0 -liconv
AR            = ar cqs
RANLIB        =
QMAKE         = /usr/local/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -R
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = $(COPY_FILE)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp
OBJECTS       = main.o
DIST          = /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                pro.pro
QMAKE_TARGET  = arp_watch
DESTDIR       =
TARGET        = arp_watch

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cc.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.cxx.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.C.o:
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

.c.o:
        $(CC) -c $(CFLAGS) $(INCPATH) -o &#34;$@&#34; &#34;$&amp;lt;&#34;

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)
        $(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: pro.pro  /usr/local/share/qt4/mkspecs/freebsd-g++/qmake.conf /usr/local/share/qt4/mkspecs/common/unix.conf \
                /usr/local/share/qt4/mkspecs/qconfig.pri \
                /usr/local/share/qt4/mkspecs/features/qt_functions.prf \
                /usr/local/share/qt4/mkspecs/features/qt_config.prf \
                /usr/local/share/qt4/mkspecs/features/exclusive_builds.prf \
                /usr/local/share/qt4/mkspecs/features/default_pre.prf \
                /usr/local/share/qt4/mkspecs/features/release.prf \
                /usr/local/share/qt4/mkspecs/features/default_post.prf \
                /usr/local/share/qt4/mkspecs/features/unix/thread.prf \
                /usr/local/share/qt4/mkspecs/features/warn_on.prf \
                /usr/local/share/qt4/mkspecs/features/qt.prf \
                /usr/local/share/qt4/mkspecs/features/moc.prf \
                /usr/local/share/qt4/mkspecs/features/resources.prf \
                /usr/local/share/qt4/mkspecs/features/uic.prf \
                /usr/local/share/qt4/mkspecs/features/yacc.prf \
                /usr/local/share/qt4/mkspecs/features/lex.prf \
                /usr/local/lib/qt4/libQtSql.prl \
                /usr/local/lib/qt4/libQtCore.prl \
                /usr/local/lib/qt4/libQtGui.prl
        $(QMAKE) -unix -o Makefile pro.pro
/usr/local/share/qt4/mkspecs/common/unix.conf:
/usr/local/share/qt4/mkspecs/qconfig.pri:
/usr/local/share/qt4/mkspecs/features/qt_functions.prf:
/usr/local/share/qt4/mkspecs/features/qt_config.prf:
/usr/local/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/local/share/qt4/mkspecs/features/default_pre.prf:
/usr/local/share/qt4/mkspecs/features/release.prf:
/usr/local/share/qt4/mkspecs/features/default_post.prf:
/usr/local/share/qt4/mkspecs/features/unix/thread.prf:
/usr/local/share/qt4/mkspecs/features/warn_on.prf:
/usr/local/share/qt4/mkspecs/features/qt.prf:
/usr/local/share/qt4/mkspecs/features/moc.prf:
/usr/local/share/qt4/mkspecs/features/resources.prf:
/usr/local/share/qt4/mkspecs/features/uic.prf:
/usr/local/share/qt4/mkspecs/features/yacc.prf:
/usr/local/share/qt4/mkspecs/features/lex.prf:
/usr/local/lib/qt4/libQtSql.prl:
/usr/local/lib/qt4/libQtCore.prl:
/usr/local/lib/qt4/libQtGui.prl:
qmake:  FORCE
        @$(QMAKE) -unix -o Makefile pro.pro

dist:
        @$(CHK_DIR_EXISTS) .tmp/arp_watch1.0.0 || $(MKDIR) .tmp/arp_watch1.0.0
        $(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/arp_watch1.0.0/ &amp;#038;&amp;#038; $(COPY_FILE) --parents main.cpp .tmp/arp_watch1.0.0/ &amp;#038;&amp;#038; (cd `dirname .tmp/arp_watch1.0.0` &amp;#038;&amp;#038; $(TAR) arp_watch1.0.0.tar arp_watch1.0.0 &amp;#038;&amp;#038; $(COMPRESS) arp_watch1.0.0.tar) &amp;#038;&amp;#038; $(MOVE) `dirname .tmp/arp_watch1.0.0`/arp_watch1.0.0.tar.gz . &amp;#038;&amp;#038; $(DEL_FILE) -r .tmp/arp_watch1.0.0


clean:compiler_clean
        -$(DEL_FILE) $(OBJECTS)
        -$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
        -$(DEL_FILE) $(TARGET)
        -$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
        -$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean:

####### Compile

main.o: main.cpp
        $(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:


&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>